{"ast":null,"code":"export const engineeringTools=[{id:\"trace-width-calculator\",name:\"PCB Trace Width Calculator\",description:\"Calculate the required trace width for a given current and temperature rise\",category:\"general\",inputs:[{id:\"current\",label:\"Current\",unit:\"A\",type:\"number\",min:0.1,max:100,default:1},{id:\"tempRise\",label:\"Temperature Rise\",unit:\"°C\",type:\"number\",min:1,max:100,default:10},{id:\"copperThickness\",label:\"Copper Thickness\",unit:\"oz\",type:\"number\",min:0.5,max:4,default:1},{id:\"traceLength\",label:\"Trace Length\",unit:\"mm\",type:\"number\",min:1,max:1000,default:50}],calculate:inputs=>{const{current,tempRise,copperThickness,traceLength}=inputs;// IPC-2221 formula for external traces\nconst area=Math.pow(current/(0.048*Math.pow(tempRise,0.44)),1/0.725);// Convert area to width (thickness = copper thickness * 0.0347mm/oz)\nconst thickness=copperThickness*0.0347;// mm\nconst width=area/thickness;// Calculate resistance and voltage drop\nconst resistivity=1.7e-8;// ohm⋅m for copper\nconst resistance=resistivity*traceLength*1e-3/(area*1e-6);// ohms\nconst voltageDrop=current*resistance;const powerLoss=current*current*resistance;return{traceWidth:Number(width.toFixed(3)),traceArea:Number(area.toFixed(3)),resistance:Number((resistance*1000).toFixed(3)),// mΩ\nvoltageDrop:Number((voltageDrop*1000).toFixed(3)),// mV\npowerLoss:Number((powerLoss*1000).toFixed(3))// mW\n};}},{id:\"diff-impedance-calculator\",name:\"Differential Pair Impedance (Microstrip)\",description:\"Estimate single-ended and differential impedance with spacing suggestion\",category:\"impedance\",inputs:[{id:\"width\",label:\"Trace Width\",unit:\"mm\",type:\"number\",min:0.05,max:10,default:0.2},{id:\"height\",label:\"Substrate Thickness (h)\",unit:\"mm\",type:\"number\",min:0.1,max:5,default:1.6},{id:\"dielectric\",label:\"Dielectric Constant (εr)\",unit:\"\",type:\"number\",min:1,max:20,default:4.2},{id:\"copperThickness\",label:\"Copper Thickness\",unit:\"µm\",type:\"number\",min:10,max:105,default:35},{id:\"spacing\",label:\"Pair Spacing (s)\",unit:\"mm\",type:\"number\",min:0.05,max:10,default:0.2},{id:\"targetZdiff\",label:\"Target Zdiff\",unit:\"Ω\",type:\"number\",min:50,max:150,default:100}],calculate:inputs=>{const{width,height,dielectric,copperThickness,spacing,targetZdiff}=inputs;const w=width;const h=height;const er=dielectric;const t=(copperThickness||35)/1000;// mm\n// Effective width (Hammerstad/Jensen approx.)\nconst weff=w+t/Math.PI*Math.log(1+4*Math.E/(t/h*(1/Math.tanh(Math.sqrt(6.517*w/t)))));const u=weff/h;const z0=u<=1?60/Math.sqrt(er)*Math.log(8/u+u/4):120*Math.PI/(Math.sqrt(er)*(u+1.393+0.667*Math.log(u+1.444)));// Differential impedance approximation for coupled microstrip\nconst s=spacing/h;const k=0.48*Math.exp(-0.96*s);const zdiff=2*z0*(1-k);// Find recommended spacing for target Zdiff by simple search\nlet bestS=spacing;let bestErr=Math.abs(zdiff-targetZdiff);for(let sTest=0.05;sTest<=5*h;sTest+=Math.max(0.01,0.02*h)){const st=sTest/h;const kd=0.48*Math.exp(-0.96*st);const zdt=2*z0*(1-kd);const err=Math.abs(zdt-targetZdiff);if(err<bestErr){bestErr=err;bestS=sTest;}}return{z0Single:Number(z0.toFixed(2)),zDiff:Number(zdiff.toFixed(2)),recSpacing:Number(bestS.toFixed(3))};}},{id:\"via-current-thermal\",name:\"Via Current & Thermal Estimator\",description:\"Estimate via resistance, current per via, and temperature rise\",category:\"power\",inputs:[{id:\"holeDiameter\",label:\"Hole Diameter\",unit:\"mm\",type:\"number\",min:0.15,max:1.0,default:0.3},{id:\"plating\",label:\"Plating Thickness\",unit:\"µm\",type:\"number\",min:15,max:35,default:25},{id:\"height\",label:\"Board Thickness\",unit:\"mm\",type:\"number\",min:0.6,max:2.4,default:1.6},{id:\"count\",label:\"Vias in Parallel\",unit:\"\",type:\"number\",min:1,max:100,default:1},{id:\"current\",label:\"Total Current\",unit:\"A\",type:\"number\",min:0.1,max:30,default:2}],calculate:inputs=>{const d_mm=inputs.holeDiameter;const t_mm=(inputs.plating||25)/1000;// mm\nconst h_mm=inputs.height;const n=Math.max(1,Math.floor(inputs.count));const I=inputs.current;// Cross-sectional ring area (thin-wall approximation): A ≈ π * d * t\nconst area_mm2=Math.PI*d_mm*t_mm;// mm^2\nconst area_m2=area_mm2*1e-6;// m^2\nconst L_m=h_mm/1000;// m\nconst rho=1.7e-8;// Ω·m (copper)\nconst R_via=rho*L_m/area_m2;// Ω per via\nconst I_per=I/n;// A\n// Rough thermal resistance K/W (very approximate)\nconst k_cu=237;// W/m·K\nconst Rth=L_m/(k_cu*area_m2);// K/W\nconst P_per=I_per*I_per*R_via;// W\nconst dT=P_per*Rth;// °C\nreturn{rPerVia:Number((R_via*1000).toFixed(3)),// mΩ\ncurrentPerVia:Number(I_per.toFixed(2)),temperatureRise:Number(dT.toFixed(1)),safetyMargin:Number((Math.max(0,40-dT)/40*100).toFixed(0))// vs. 40°C headroom\n};}},{id:\"decap-optimizer\",name:\"Decoupling Capacitor Optimizer\",description:\"Suggest cap mix to meet target impedance over frequency\",category:\"power\",inputs:[{id:\"fMin\",label:\"Min Frequency\",unit:\"MHz\",type:\"number\",min:0.1,max:1000,default:1},{id:\"fMax\",label:\"Max Frequency\",unit:\"MHz\",type:\"number\",min:1,max:5000,default:100},{id:\"zTarget\",label:\"Target Impedance\",unit:\"mΩ\",type:\"number\",min:1,max:500,default:50}],calculate:inputs=>{const fMaxHz=inputs.fMax*1e6;const Zt=inputs.zTarget/1000;// Ω\n// C_total required at fMax: Z = 1/(2π f C)\nconst C_total=1/(2*Math.PI*fMaxHz*Zt);// F\nconst C_uF=C_total*1e6;// Split: 60% small (0.1uF), 30% mid (1uF), 10% bulk (10uF)\nconst n100n=Math.ceil(0.6*C_uF/0.1);const n1u=Math.ceil(0.3*C_uF/1);const n10u=Math.max(1,Math.ceil(0.1*C_uF/10));return{totalCap:Number(C_uF.toFixed(2)),n100n:n100n,n1u:n1u,n10u:n10u};}},{id:\"snubber-calculator\",name:\"Switching Regulator Snubber\",description:\"Suggest RC snubber from ringing frequency and parasitic C\",category:\"power\",inputs:[{id:\"fRing\",label:\"Ringing Frequency\",unit:\"MHz\",type:\"number\",min:0.1,max:100,default:10},{id:\"cPar\",label:\"Parasitic Capacitance\",unit:\"nF\",type:\"number\",min:0.5,max:100,default:10}],calculate:inputs=>{const fHz=inputs.fRing*1e6;const Cpar=inputs.cPar*1e-9;const L=1/((2*Math.PI*fHz)**2*Cpar);// H\nconst Csnub=2*Cpar;// F (rule of thumb)\nconst Rs=1/(2*Math.PI*fHz*Csnub);// Ω\nreturn{lStray:Number((L*1e6).toFixed(3)),// µH\ncSnub:Number((Csnub*1e9).toFixed(2)),// nF\nrSnub:Number(Rs.toFixed(1))// Ω\n};}},{id:\"plane-drop\",name:\"PCB Power Plane Voltage Drop\",description:\"Estimate plane resistance, voltage drop, and power loss\",category:\"power\",inputs:[{id:\"length\",label:\"Current Path Length\",unit:\"mm\",type:\"number\",min:1,max:1000,default:100},{id:\"width\",label:\"Effective Width\",unit:\"mm\",type:\"number\",min:0.5,max:100,default:20},{id:\"copperOz\",label:\"Copper Weight\",unit:\"oz\",type:\"number\",min:0.5,max:4,default:1},{id:\"current\",label:\"Current\",unit:\"A\",type:\"number\",min:0.1,max:100,default:5}],calculate:inputs=>{const L_m=inputs.length/1000;const w_mm=inputs.width;const t_mm=inputs.copperOz*0.0347;const A_m2=w_mm*t_mm*1e-6;const rho=1.7e-8;// Ω·m\nconst R=rho*L_m/A_m2;const V=inputs.current*R;const P=inputs.current*inputs.current*R;return{planeR:Number((R*1000).toFixed(3)),// mΩ\nvDrop:Number((V*1000).toFixed(2)),// mV\nplanePower:Number((P*1000).toFixed(2))// mW\n};}},{id:\"baud-error\",name:\"UART Baud Rate Error\",description:\"Compute actual baud, error, and best divisor\",category:\"transmission\",inputs:[{id:\"fclk\",label:\"MCU Clock\",unit:\"MHz\",type:\"number\",min:1,max:400,default:16},{id:\"baud\",label:\"Desired Baud\",unit:\"\",type:\"number\",min:110,max:921600,default:115200},{id:\"oversample\",label:\"Oversampling\",unit:\"x\",type:\"number\",min:4,max:32,default:16},{id:\"divisor\",label:\"Divisor (N)\",unit:\"\",type:\"number\",min:1,max:65535,default:8}],calculate:inputs=>{const f=inputs.fclk*1e6;const os=inputs.oversample||16;const baud=inputs.baud;const N=Math.max(1,Math.round(inputs.divisor));const actual=f/(os*N);const err=(actual-baud)/baud*100;const Nbest=Math.max(1,Math.round(f/(os*baud)));const bestBaud=f/(os*Nbest);const bestErr=(bestBaud-baud)/baud*100;return{actualBaud:Number(actual.toFixed(1)),errorPercent:Number(err.toFixed(3)),suggestedDivisor:Nbest,suggestedBaud:Number(bestBaud.toFixed(1)),suggestedError:Number(bestErr.toFixed(3))};}},{id:\"pwm-calculator\",name:\"Timer & PWM Frequency\",description:\"Compute achievable PWM frequency and resolution\",category:\"general\",inputs:[{id:\"fclk\",label:\"Timer Clock\",unit:\"MHz\",type:\"number\",min:0.5,max:400,default:16},{id:\"prescaler\",label:\"Prescaler\",unit:\"\",type:\"number\",min:1,max:65536,default:64},{id:\"bits\",label:\"Resolution (bits)\",unit:\"\",type:\"number\",min:1,max:16,default:8}],calculate:inputs=>{const f=inputs.fclk*1e6;const pres=Math.max(1,Math.round(inputs.prescaler));const levels=Math.pow(2,Math.max(1,Math.round(inputs.bits)))-1;const freq=f/(pres*(levels+1));const step=100/(levels+1);return{pwmFrequency:Number(freq.toFixed(1)),resolutionBits:Math.round(inputs.bits),dutyStep:Number(step.toFixed(4))};}},{id:\"battery-life\",name:\"Battery Life Estimator\",description:\"Estimate runtime from active/sleep currents and duty cycle\",category:\"power\",inputs:[{id:\"active\",label:\"Active Current\",unit:\"mA\",type:\"number\",min:0.01,max:5000,default:50},{id:\"sleep\",label:\"Sleep Current\",unit:\"mA\",type:\"number\",min:0,max:100,default:0.1},{id:\"duty\",label:\"Active Duty Cycle\",unit:\"%\",type:\"number\",min:0,max:100,default:10},{id:\"capacity\",label:\"Battery Capacity\",unit:\"mAh\",type:\"number\",min:1,max:50000,default:2000},{id:\"temp\",label:\"Temperature\",unit:\"°C\",type:\"number\",min:-20,max:60,default:25}],calculate:inputs=>{const duty=Math.min(100,Math.max(0,inputs.duty))/100;const Iavg=inputs.active*duty+inputs.sleep*(1-duty);// Simple temperature derating\nlet capAdj=inputs.capacity;if(inputs.temp<0)capAdj*=0.8;else if(inputs.temp>40)capAdj*=0.9;const hours=capAdj/Iavg;return{avgCurrent:Number(Iavg.toFixed(3)),capacityAdjusted:Number(capAdj.toFixed(0)),runtimeHours:Number(hours.toFixed(1)),runtimeDays:Number((hours/24).toFixed(2))};}},{id:\"rc-filter\",name:\"RC Low-Pass Filter Helper\",description:\"Compute R/C for a desired cutoff and sampling rate\",category:\"transmission\",inputs:[{id:\"fc\",label:\"Cutoff Frequency\",unit:\"kHz\",type:\"number\",min:0.1,max:10000,default:2},{id:\"fs\",label:\"ADC Sampling Rate\",unit:\"kHz\",type:\"number\",min:1,max:50000,default:10},{id:\"Rk\",label:\"Chosen R\",unit:\"kΩ\",type:\"number\",min:0.1,max:1000,default:10}],calculate:inputs=>{const fc=inputs.fc*1e3;// Hz\nconst R=inputs.Rk*1e3;// Ω\nconst C=1/(2*Math.PI*R*fc);// F\nconst tau=R*C;// s\nconst recFc=inputs.fs*1e3/5;// Hz\nreturn{cValue:Number((C*1e9).toFixed(2)),// nF\ntau:Number((tau*1e3).toFixed(3)),// ms\nrecommendedFc:Number((recFc/1e3).toFixed(2))// kHz\n};}},{id:\"trace-delay\",name:\"PCB Trace Delay / Length\",description:\"Compute delay from length and εr; and length for a target delay\",category:\"transmission\",inputs:[{id:\"erEff\",label:\"Effective εr\",unit:\"\",type:\"number\",min:1,max:10,default:3.2},{id:\"length\",label:\"Length\",unit:\"mm\",type:\"number\",min:1,max:2000,default:25},{id:\"delay\",label:\"Target Delay\",unit:\"ps\",type:\"number\",min:1,max:5000,default:150}],calculate:inputs=>{const c=299792458;// m/s\nconst vp=c/Math.sqrt(inputs.erEff);const length_m=inputs.length/1000;const delay_s=length_m/vp;const delay_ps=delay_s*1e12;const ps_per_in=0.0254/vp*1e12;// ps/in\nconst length_for_delay_m=inputs.delay*1e-12*vp;return{delayNs:Number((delay_ps/1000).toFixed(3)),delayPs:Number(delay_ps.toFixed(1)),psPerInch:Number(ps_per_in.toFixed(1)),lengthForDelay:Number((length_for_delay_m*1000).toFixed(2))};}},{id:\"impedance-calculator\",name:\"Microstrip Impedance Calculator\",description:\"Calculate characteristic impedance of microstrip transmission lines\",category:\"impedance\",inputs:[{id:\"width\",label:\"Trace Width\",unit:\"mm\",type:\"number\",min:0.1,max:10,default:0.2},{id:\"thickness\",label:\"Substrate Thickness\",unit:\"mm\",type:\"number\",min:0.1,max:5,default:1.6},{id:\"dielectric\",label:\"Dielectric Constant (εr)\",unit:\"\",type:\"number\",min:1,max:20,default:4.4},{id:\"copperThickness\",label:\"Copper Thickness\",unit:\"μm\",type:\"number\",min:17,max:105,default:35}],calculate:inputs=>{const{width,thickness,dielectric,copperThickness}=inputs;const w=width;const h=thickness;const er=dielectric;const t=copperThickness/1000;// convert to mm\n// Effective width accounting for copper thickness\nconst weff=w+t/Math.PI*Math.log(2*h/t);let z0;if(weff/h<=1){// Narrow trace\nz0=60/Math.sqrt(er)*Math.log(8*h/weff+weff/(4*h));}else{// Wide trace\nz0=120*Math.PI/(Math.sqrt(er)*(weff/h+1.393+0.667*Math.log(weff/h+1.444)));}// Effective dielectric constant\nconst erEff=(er+1)/2+(er-1)/2*Math.pow(1+12*h/weff,-0.5);// Phase velocity\nconst c=299792458;// m/s\nconst vp=c/Math.sqrt(erEff);return{impedance:Number(z0.toFixed(2)),effectiveDielectric:Number(erEff.toFixed(3)),phaseVelocity:Number((vp/1e6).toFixed(1)),// Mm/s\nwavelength:Number((vp/1e9).toFixed(3))// m at 1 GHz\n};}},{id:\"via-calculator\",name:\"Via Impedance Calculator\",description:\"Calculate the impedance and current carrying capacity of vias\",category:\"impedance\",inputs:[{id:\"diameter\",label:\"Via Diameter\",unit:\"mm\",type:\"number\",min:0.1,max:2,default:0.2},{id:\"height\",label:\"Via Height\",unit:\"mm\",type:\"number\",min:0.1,max:5,default:1.6},{id:\"padDiameter\",label:\"Pad Diameter\",unit:\"mm\",type:\"number\",min:0.2,max:3,default:0.4},{id:\"current\",label:\"Current\",unit:\"A\",type:\"number\",min:0.1,max:10,default:1}],calculate:inputs=>{const diameter=inputs.diameter;const height=inputs.height;const current=inputs.current;const d=diameter;const h=height;// Via impedance approximation\nconst impedance=60*Math.log(4*h/d);// Current capacity (conservative estimate)\nconst area=Math.PI*Math.pow(d/2,2);// mm²\nconst currentCapacity=area*2;// A/mm² rule of thumb\n// Thermal resistance\nconst thermalResistance=h/(237*area);// K/W (copper thermal conductivity ≈ 237 W/m⋅K)\n// Temperature rise\nconst resistance=1.7e-8*h/(area*1e-6);// ohms\nconst powerLoss=current*current*resistance;const tempRise=powerLoss*thermalResistance;return{impedance:Number(impedance.toFixed(2)),currentCapacity:Number(currentCapacity.toFixed(2)),resistance:Number((resistance*1e6).toFixed(2)),// μΩ\ntemperatureRise:Number(tempRise.toFixed(1)),safetyMargin:Number(((currentCapacity/current-1)*100).toFixed(1))};}},// Removed niche antenna dipole calculator to focus on PCB/mechanical value\n{id:\"lc-calculator\",name:\"LC Resonant Circuit Calculator\",description:\"Calculate resonant frequency and component values for LC circuits\",category:\"general\",inputs:[{id:\"inductance\",label:\"Inductance\",unit:\"μH\",type:\"number\",min:0.001,max:1000,default:10},{id:\"capacitance\",label:\"Capacitance\",unit:\"pF\",type:\"number\",min:0.1,max:100000,default:100},{id:\"resistance\",label:\"Series Resistance\",unit:\"Ω\",type:\"number\",min:0.1,max:1000,default:10},{id:\"targetFreq\",label:\"Target Frequency\",unit:\"MHz\",type:\"number\",min:0.1,max:10000,default:100}],calculate:inputs=>{const{inductance,capacitance,resistance,targetFreq}=inputs;const L=inductance*1e-6;// H\nconst C=capacitance*1e-12;// F\nconst R=resistance;// Ω\nconst fTarget=targetFreq*1e6;// Hz\n// Resonant frequency\nconst f0=1/(2*Math.PI*Math.sqrt(L*C));// Hz\n// Q factor\nconst omega0=2*Math.PI*f0;const Q=omega0*L/R;// Bandwidth\nconst bandwidth=f0/Q;// Hz\n// Required L for target frequency (keeping C constant)\nconst LForTarget=1/(Math.pow(2*Math.PI*fTarget,2)*C);// H\n// Required C for target frequency (keeping L constant)\nconst CForTarget=1/(Math.pow(2*Math.PI*fTarget,2)*L);// F\n// Characteristic impedance\nconst Z0=Math.sqrt(L/C);// Ω\nreturn{resonantFreq:Number((f0/1e6).toFixed(3)),// MHz\nqFactor:Number(Q.toFixed(1)),bandwidth:Number((bandwidth/1e3).toFixed(1)),// kHz\nrequiredL:Number((LForTarget*1e6).toFixed(3)),// μH\nrequiredC:Number((CForTarget*1e12).toFixed(1)),// pF\nimpedance:Number(Z0.toFixed(1))// Ω\n};}},{id:\"heatsink-size\",name:\"Heatsink Size Estimator\",description:\"Estimate required thermal resistance (°C/W) and fin area\",category:\"mechanical\",inputs:[{id:\"power\",label:\"Power Dissipation\",unit:\"W\",type:\"number\",min:0.1,max:500,default:10},{id:\"tAmbient\",label:\"Ambient Temp\",unit:\"°C\",type:\"number\",min:-20,max:60,default:25},{id:\"tJunction\",label:\"Max Junction Temp\",unit:\"°C\",type:\"number\",min:40,max:150,default:100},{id:\"thetaJC\",label:\"θJC\",unit:\"°C/W\",type:\"number\",min:0.1,max:10,default:1.5},{id:\"thetaCS\",label:\"θCS\",unit:\"°C/W\",type:\"number\",min:0.05,max:2,default:0.2}],calculate:inputs=>{const ΔT=inputs.tJunction-inputs.tAmbient;const θ_total=ΔT/inputs.power;const θSA=Math.max(0.1,θ_total-(inputs.thetaJC+inputs.thetaCS));// Rough natural convection surface area estimate: θSA ≈ 50/A_dm2 (°C/W)\nconst A_dm2=50/θSA;// dm^2\nconst A_cm2=A_dm2*100;// cm^2\nreturn{thetaSA:Number(θSA.toFixed(2)),estArea:Number(A_cm2.toFixed(0))};}},{id:\"bolt-preload\",name:\"Bolt Preload & Torque\",description:\"Estimate torque for target preload using K-factor\",category:\"mechanical\",inputs:[{id:\"preload\",label:\"Target Preload\",unit:\"kN\",type:\"number\",min:0.1,max:200,default:10},{id:\"diameter\",label:\"Bolt Diameter\",unit:\"mm\",type:\"number\",min:2,max:36,default:8},{id:\"kFactor\",label:\"K-Factor\",unit:\"\",type:\"number\",min:0.1,max:0.4,default:0.2}],calculate:inputs=>{const F=inputs.preload*1000;// N\nconst d_m=inputs.diameter/1000;// m\nconst T=inputs.kFactor*F*d_m;// N·m\nreturn{torqueNm:Number(T.toFixed(2))};}},{id:\"beam-deflection\",name:\"Cantilever Beam Deflection\",description:\"Tip deflection under end load\",category:\"mechanical\",inputs:[{id:\"load\",label:\"End Load\",unit:\"N\",type:\"number\",min:1,max:50000,default:100},{id:\"length\",label:\"Length\",unit:\"mm\",type:\"number\",min:10,max:2000,default:200},{id:\"width\",label:\"Width\",unit:\"mm\",type:\"number\",min:1,max:200,default:20},{id:\"thickness\",label:\"Thickness\",unit:\"mm\",type:\"number\",min:1,max:200,default:5},{id:\"E\",label:\"Young's Modulus\",unit:\"GPa\",type:\"number\",min:1,max:300,default:200}],calculate:inputs=>{const F=inputs.load;// N\nconst L=inputs.length/1000;// m\nconst b=inputs.width/1000;// m\nconst h=inputs.thickness/1000;// m\nconst E=inputs.E*1e9;// Pa\nconst I=b*Math.pow(h,3)/12;// m^4\nconst delta=F*Math.pow(L,3)/(3*E*I);// m\nreturn{deflection:Number((delta*1000).toFixed(3))// mm\n};}}];","map":{"version":3,"names":["engineeringTools","id","name","description","category","inputs","label","unit","type","min","max","default","calculate","current","tempRise","copperThickness","traceLength","area","Math","pow","thickness","width","resistivity","resistance","voltageDrop","powerLoss","traceWidth","Number","toFixed","traceArea","height","dielectric","spacing","targetZdiff","w","h","er","t","weff","PI","log","E","tanh","sqrt","u","z0","s","k","exp","zdiff","bestS","bestErr","abs","sTest","st","kd","zdt","err","z0Single","zDiff","recSpacing","d_mm","holeDiameter","t_mm","plating","h_mm","n","floor","count","I","area_mm2","area_m2","L_m","rho","R_via","I_per","k_cu","Rth","P_per","dT","rPerVia","currentPerVia","temperatureRise","safetyMargin","fMaxHz","fMax","Zt","zTarget","C_total","C_uF","n100n","ceil","n1u","n10u","totalCap","fHz","fRing","Cpar","cPar","L","Csnub","Rs","lStray","cSnub","rSnub","length","w_mm","copperOz","A_m2","R","V","P","planeR","vDrop","planePower","f","fclk","os","oversample","baud","N","round","divisor","actual","Nbest","bestBaud","actualBaud","errorPercent","suggestedDivisor","suggestedBaud","suggestedError","pres","prescaler","levels","bits","freq","step","pwmFrequency","resolutionBits","dutyStep","duty","Iavg","active","sleep","capAdj","capacity","temp","hours","avgCurrent","capacityAdjusted","runtimeHours","runtimeDays","fc","Rk","C","tau","recFc","fs","cValue","recommendedFc","c","vp","erEff","length_m","delay_s","delay_ps","ps_per_in","length_for_delay_m","delay","delayNs","delayPs","psPerInch","lengthForDelay","impedance","effectiveDielectric","phaseVelocity","wavelength","diameter","d","currentCapacity","thermalResistance","inductance","capacitance","targetFreq","fTarget","f0","omega0","Q","bandwidth","LForTarget","CForTarget","Z0","resonantFreq","qFactor","requiredL","requiredC","ΔT","tJunction","tAmbient","θ_total","power","θSA","thetaJC","thetaCS","A_dm2","A_cm2","thetaSA","estArea","F","preload","d_m","T","kFactor","torqueNm","load","b","delta","deflection"],"sources":["C:/Github/cvanbibber.github.io/src/data/tools.ts"],"sourcesContent":["import { Tool } from '../types';\r\n\r\nexport const engineeringTools: Tool[] = [\r\n  {\r\n    id: \"trace-width-calculator\",\r\n    name: \"PCB Trace Width Calculator\",\r\n    description: \"Calculate the required trace width for a given current and temperature rise\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 100, default: 1 },\r\n      { id: \"tempRise\", label: \"Temperature Rise\", unit: \"°C\", type: \"number\", min: 1, max: 100, default: 10 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"oz\", type: \"number\", min: 0.5, max: 4, default: 1 },\r\n      { id: \"traceLength\", label: \"Trace Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 50 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { current, tempRise, copperThickness, traceLength } = inputs;\r\n      \r\n      // IPC-2221 formula for external traces\r\n      const area = Math.pow(current / (0.048 * Math.pow(tempRise, 0.44)), 1/0.725);\r\n      \r\n      // Convert area to width (thickness = copper thickness * 0.0347mm/oz)\r\n      const thickness = copperThickness * 0.0347; // mm\r\n      const width = area / thickness;\r\n      \r\n      // Calculate resistance and voltage drop\r\n      const resistivity = 1.7e-8; // ohm⋅m for copper\r\n      const resistance = (resistivity * traceLength * 1e-3) / (area * 1e-6); // ohms\r\n      const voltageDrop = current * resistance;\r\n      const powerLoss = current * current * resistance;\r\n      \r\n      return {\r\n        traceWidth: Number(width.toFixed(3)),\r\n        traceArea: Number(area.toFixed(3)),\r\n        resistance: Number((resistance * 1000).toFixed(3)), // mΩ\r\n        voltageDrop: Number((voltageDrop * 1000).toFixed(3)), // mV\r\n        powerLoss: Number((powerLoss * 1000).toFixed(3)) // mW\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"diff-impedance-calculator\",\r\n    name: \"Differential Pair Impedance (Microstrip)\",\r\n    description: \"Estimate single-ended and differential impedance with spacing suggestion\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"width\", label: \"Trace Width\", unit: \"mm\", type: \"number\", min: 0.05, max: 10, default: 0.2 },\r\n      { id: \"height\", label: \"Substrate Thickness (h)\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"dielectric\", label: \"Dielectric Constant (εr)\", unit: \"\", type: \"number\", min: 1, max: 20, default: 4.2 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"µm\", type: \"number\", min: 10, max: 105, default: 35 },\r\n      { id: \"spacing\", label: \"Pair Spacing (s)\", unit: \"mm\", type: \"number\", min: 0.05, max: 10, default: 0.2 },\r\n      { id: \"targetZdiff\", label: \"Target Zdiff\", unit: \"Ω\", type: \"number\", min: 50, max: 150, default: 100 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { width, height, dielectric, copperThickness, spacing, targetZdiff } = inputs;\r\n      const w = width;\r\n      const h = height;\r\n      const er = dielectric;\r\n      const t = (copperThickness || 35) / 1000; // mm\r\n\r\n      // Effective width (Hammerstad/Jensen approx.)\r\n      const weff = w + (t / Math.PI) * Math.log(1 + 4 * Math.E / (t / h * (1/Math.tanh(Math.sqrt(6.517 * w / t)))));\r\n      const u = weff / h;\r\n      const z0 = u <= 1\r\n        ? (60 / Math.sqrt(er)) * Math.log(8 / u + u / 4)\r\n        : (120 * Math.PI) / (Math.sqrt(er) * (u + 1.393 + 0.667 * Math.log(u + 1.444)));\r\n\r\n      // Differential impedance approximation for coupled microstrip\r\n      const s = spacing / h;\r\n      const k = 0.48 * Math.exp(-0.96 * s);\r\n      const zdiff = 2 * z0 * (1 - k);\r\n\r\n      // Find recommended spacing for target Zdiff by simple search\r\n      let bestS = spacing;\r\n      let bestErr = Math.abs(zdiff - targetZdiff);\r\n      for (let sTest = 0.05; sTest <= 5 * h; sTest += Math.max(0.01, 0.02 * h)) {\r\n        const st = (sTest / h);\r\n        const kd = 0.48 * Math.exp(-0.96 * st);\r\n        const zdt = 2 * z0 * (1 - kd);\r\n        const err = Math.abs(zdt - targetZdiff);\r\n        if (err < bestErr) { bestErr = err; bestS = sTest; }\r\n      }\r\n\r\n      return {\r\n        z0Single: Number(z0.toFixed(2)),\r\n        zDiff: Number(zdiff.toFixed(2)),\r\n        recSpacing: Number(bestS.toFixed(3))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"via-current-thermal\",\r\n    name: \"Via Current & Thermal Estimator\",\r\n    description: \"Estimate via resistance, current per via, and temperature rise\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"holeDiameter\", label: \"Hole Diameter\", unit: \"mm\", type: \"number\", min: 0.15, max: 1.0, default: 0.3 },\r\n      { id: \"plating\", label: \"Plating Thickness\", unit: \"µm\", type: \"number\", min: 15, max: 35, default: 25 },\r\n      { id: \"height\", label: \"Board Thickness\", unit: \"mm\", type: \"number\", min: 0.6, max: 2.4, default: 1.6 },\r\n      { id: \"count\", label: \"Vias in Parallel\", unit: \"\", type: \"number\", min: 1, max: 100, default: 1 },\r\n      { id: \"current\", label: \"Total Current\", unit: \"A\", type: \"number\", min: 0.1, max: 30, default: 2 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const d_mm = inputs.holeDiameter;\r\n      const t_mm = (inputs.plating || 25) / 1000; // mm\r\n      const h_mm = inputs.height;\r\n      const n = Math.max(1, Math.floor(inputs.count));\r\n      const I = inputs.current;\r\n\r\n      // Cross-sectional ring area (thin-wall approximation): A ≈ π * d * t\r\n      const area_mm2 = Math.PI * d_mm * t_mm; // mm^2\r\n      const area_m2 = area_mm2 * 1e-6; // m^2\r\n      const L_m = h_mm / 1000; // m\r\n      const rho = 1.7e-8; // Ω·m (copper)\r\n\r\n      const R_via = (rho * L_m) / area_m2; // Ω per via\r\n      const I_per = I / n; // A\r\n\r\n      // Rough thermal resistance K/W (very approximate)\r\n      const k_cu = 237; // W/m·K\r\n      const Rth = L_m / (k_cu * area_m2); // K/W\r\n      const P_per = I_per * I_per * R_via; // W\r\n      const dT = P_per * Rth; // °C\r\n\r\n      return {\r\n        rPerVia: Number((R_via * 1000).toFixed(3)), // mΩ\r\n        currentPerVia: Number(I_per.toFixed(2)),\r\n        temperatureRise: Number(dT.toFixed(1)),\r\n        safetyMargin: Number((Math.max(0, (40 - dT)) / 40 * 100).toFixed(0)) // vs. 40°C headroom\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"decap-optimizer\",\r\n    name: \"Decoupling Capacitor Optimizer\",\r\n    description: \"Suggest cap mix to meet target impedance over frequency\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"fMin\", label: \"Min Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 1000, default: 1 },\r\n      { id: \"fMax\", label: \"Max Frequency\", unit: \"MHz\", type: \"number\", min: 1, max: 5000, default: 100 },\r\n      { id: \"zTarget\", label: \"Target Impedance\", unit: \"mΩ\", type: \"number\", min: 1, max: 500, default: 50 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const fMaxHz = inputs.fMax * 1e6;\r\n      const Zt = inputs.zTarget / 1000; // Ω\r\n      // C_total required at fMax: Z = 1/(2π f C)\r\n      const C_total = 1 / (2 * Math.PI * fMaxHz * Zt); // F\r\n      const C_uF = C_total * 1e6;\r\n      // Split: 60% small (0.1uF), 30% mid (1uF), 10% bulk (10uF)\r\n      const n100n = Math.ceil((0.6 * C_uF) / 0.1);\r\n      const n1u = Math.ceil((0.3 * C_uF) / 1);\r\n      const n10u = Math.max(1, Math.ceil((0.1 * C_uF) / 10));\r\n      return {\r\n        totalCap: Number(C_uF.toFixed(2)),\r\n        n100n: n100n,\r\n        n1u: n1u,\r\n        n10u: n10u\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"snubber-calculator\",\r\n    name: \"Switching Regulator Snubber\",\r\n    description: \"Suggest RC snubber from ringing frequency and parasitic C\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"fRing\", label: \"Ringing Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 100, default: 10 },\r\n      { id: \"cPar\", label: \"Parasitic Capacitance\", unit: \"nF\", type: \"number\", min: 0.5, max: 100, default: 10 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const fHz = inputs.fRing * 1e6;\r\n      const Cpar = inputs.cPar * 1e-9;\r\n      const L = 1 / ((2 * Math.PI * fHz) ** 2 * Cpar); // H\r\n      const Csnub = 2 * Cpar; // F (rule of thumb)\r\n      const Rs = 1 / (2 * Math.PI * fHz * Csnub); // Ω\r\n      return {\r\n        lStray: Number((L * 1e6).toFixed(3)), // µH\r\n        cSnub: Number((Csnub * 1e9).toFixed(2)), // nF\r\n        rSnub: Number(Rs.toFixed(1)) // Ω\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"plane-drop\",\r\n    name: \"PCB Power Plane Voltage Drop\",\r\n    description: \"Estimate plane resistance, voltage drop, and power loss\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"length\", label: \"Current Path Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 100 },\r\n      { id: \"width\", label: \"Effective Width\", unit: \"mm\", type: \"number\", min: 0.5, max: 100, default: 20 },\r\n      { id: \"copperOz\", label: \"Copper Weight\", unit: \"oz\", type: \"number\", min: 0.5, max: 4, default: 1 },\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 100, default: 5 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const L_m = inputs.length / 1000;\r\n      const w_mm = inputs.width;\r\n      const t_mm = inputs.copperOz * 0.0347;\r\n      const A_m2 = (w_mm * t_mm) * 1e-6;\r\n      const rho = 1.7e-8; // Ω·m\r\n      const R = rho * L_m / A_m2;\r\n      const V = inputs.current * R;\r\n      const P = inputs.current * inputs.current * R;\r\n      return {\r\n        planeR: Number((R * 1000).toFixed(3)), // mΩ\r\n        vDrop: Number((V * 1000).toFixed(2)), // mV\r\n        planePower: Number((P * 1000).toFixed(2)) // mW\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"baud-error\",\r\n    name: \"UART Baud Rate Error\",\r\n    description: \"Compute actual baud, error, and best divisor\",\r\n    category: \"transmission\",\r\n    inputs: [\r\n      { id: \"fclk\", label: \"MCU Clock\", unit: \"MHz\", type: \"number\", min: 1, max: 400, default: 16 },\r\n      { id: \"baud\", label: \"Desired Baud\", unit: \"\", type: \"number\", min: 110, max: 921600, default: 115200 },\r\n      { id: \"oversample\", label: \"Oversampling\", unit: \"x\", type: \"number\", min: 4, max: 32, default: 16 },\r\n      { id: \"divisor\", label: \"Divisor (N)\", unit: \"\", type: \"number\", min: 1, max: 65535, default: 8 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const f = inputs.fclk * 1e6;\r\n      const os = inputs.oversample || 16;\r\n      const baud = inputs.baud;\r\n      const N = Math.max(1, Math.round(inputs.divisor));\r\n      const actual = f / (os * N);\r\n      const err = (actual - baud) / baud * 100;\r\n      const Nbest = Math.max(1, Math.round(f / (os * baud)));\r\n      const bestBaud = f / (os * Nbest);\r\n      const bestErr = (bestBaud - baud) / baud * 100;\r\n      return {\r\n        actualBaud: Number(actual.toFixed(1)),\r\n        errorPercent: Number(err.toFixed(3)),\r\n        suggestedDivisor: Nbest,\r\n        suggestedBaud: Number(bestBaud.toFixed(1)),\r\n        suggestedError: Number(bestErr.toFixed(3))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"pwm-calculator\",\r\n    name: \"Timer & PWM Frequency\",\r\n    description: \"Compute achievable PWM frequency and resolution\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"fclk\", label: \"Timer Clock\", unit: \"MHz\", type: \"number\", min: 0.5, max: 400, default: 16 },\r\n      { id: \"prescaler\", label: \"Prescaler\", unit: \"\", type: \"number\", min: 1, max: 65536, default: 64 },\r\n      { id: \"bits\", label: \"Resolution (bits)\", unit: \"\", type: \"number\", min: 1, max: 16, default: 8 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const f = inputs.fclk * 1e6;\r\n      const pres = Math.max(1, Math.round(inputs.prescaler));\r\n      const levels = Math.pow(2, Math.max(1, Math.round(inputs.bits))) - 1;\r\n      const freq = f / (pres * (levels + 1));\r\n      const step = 100 / (levels + 1);\r\n      return {\r\n        pwmFrequency: Number(freq.toFixed(1)),\r\n        resolutionBits: Math.round(inputs.bits),\r\n        dutyStep: Number(step.toFixed(4))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"battery-life\",\r\n    name: \"Battery Life Estimator\",\r\n    description: \"Estimate runtime from active/sleep currents and duty cycle\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"active\", label: \"Active Current\", unit: \"mA\", type: \"number\", min: 0.01, max: 5000, default: 50 },\r\n      { id: \"sleep\", label: \"Sleep Current\", unit: \"mA\", type: \"number\", min: 0, max: 100, default: 0.1 },\r\n      { id: \"duty\", label: \"Active Duty Cycle\", unit: \"%\", type: \"number\", min: 0, max: 100, default: 10 },\r\n      { id: \"capacity\", label: \"Battery Capacity\", unit: \"mAh\", type: \"number\", min: 1, max: 50000, default: 2000 },\r\n      { id: \"temp\", label: \"Temperature\", unit: \"°C\", type: \"number\", min: -20, max: 60, default: 25 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const duty = Math.min(100, Math.max(0, inputs.duty)) / 100;\r\n      const Iavg = inputs.active * duty + inputs.sleep * (1 - duty);\r\n      // Simple temperature derating\r\n      let capAdj = inputs.capacity;\r\n      if (inputs.temp < 0) capAdj *= 0.8; else if (inputs.temp > 40) capAdj *= 0.9;\r\n      const hours = capAdj / Iavg;\r\n      return {\r\n        avgCurrent: Number(Iavg.toFixed(3)),\r\n        capacityAdjusted: Number(capAdj.toFixed(0)),\r\n        runtimeHours: Number(hours.toFixed(1)),\r\n        runtimeDays: Number((hours / 24).toFixed(2))\r\n      };\r\n    }\r\n  },\r\n  {\r\n  id: \"rc-filter\",\r\n    name: \"RC Low-Pass Filter Helper\",\r\n    description: \"Compute R/C for a desired cutoff and sampling rate\",\r\n    category: \"transmission\",\r\n    inputs: [\r\n      { id: \"fc\", label: \"Cutoff Frequency\", unit: \"kHz\", type: \"number\", min: 0.1, max: 10000, default: 2 },\r\n      { id: \"fs\", label: \"ADC Sampling Rate\", unit: \"kHz\", type: \"number\", min: 1, max: 50000, default: 10 },\r\n      { id: \"Rk\", label: \"Chosen R\", unit: \"kΩ\", type: \"number\", min: 0.1, max: 1000, default: 10 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const fc = inputs.fc * 1e3; // Hz\r\n      const R = inputs.Rk * 1e3; // Ω\r\n      const C = 1 / (2 * Math.PI * R * fc); // F\r\n      const tau = R * C; // s\r\n      const recFc = (inputs.fs * 1e3) / 5; // Hz\r\n      return {\r\n        cValue: Number((C * 1e9).toFixed(2)), // nF\r\n        tau: Number((tau * 1e3).toFixed(3)), // ms\r\n        recommendedFc: Number((recFc / 1e3).toFixed(2)) // kHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"trace-delay\",\r\n    name: \"PCB Trace Delay / Length\",\r\n    description: \"Compute delay from length and εr; and length for a target delay\",\r\n    category: \"transmission\",\r\n    inputs: [\r\n      { id: \"erEff\", label: \"Effective εr\", unit: \"\", type: \"number\", min: 1, max: 10, default: 3.2 },\r\n      { id: \"length\", label: \"Length\", unit: \"mm\", type: \"number\", min: 1, max: 2000, default: 25 },\r\n      { id: \"delay\", label: \"Target Delay\", unit: \"ps\", type: \"number\", min: 1, max: 5000, default: 150 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const c = 299792458; // m/s\r\n      const vp = c / Math.sqrt(inputs.erEff);\r\n      const length_m = inputs.length / 1000;\r\n      const delay_s = length_m / vp;\r\n      const delay_ps = delay_s * 1e12;\r\n      const ps_per_in = (0.0254 / vp) * 1e12; // ps/in\r\n      const length_for_delay_m = (inputs.delay * 1e-12) * vp;\r\n      return {\r\n        delayNs: Number((delay_ps / 1000).toFixed(3)),\r\n        delayPs: Number(delay_ps.toFixed(1)),\r\n        psPerInch: Number(ps_per_in.toFixed(1)),\r\n        lengthForDelay: Number((length_for_delay_m * 1000).toFixed(2))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"impedance-calculator\",\r\n    name: \"Microstrip Impedance Calculator\",\r\n    description: \"Calculate characteristic impedance of microstrip transmission lines\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"width\", label: \"Trace Width\", unit: \"mm\", type: \"number\", min: 0.1, max: 10, default: 0.2 },\r\n      { id: \"thickness\", label: \"Substrate Thickness\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"dielectric\", label: \"Dielectric Constant (εr)\", unit: \"\", type: \"number\", min: 1, max: 20, default: 4.4 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"μm\", type: \"number\", min: 17, max: 105, default: 35 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { width, thickness, dielectric, copperThickness } = inputs;\r\n      \r\n      const w = width;\r\n      const h = thickness;\r\n      const er = dielectric;\r\n      const t = copperThickness / 1000; // convert to mm\r\n      \r\n      // Effective width accounting for copper thickness\r\n      const weff = w + (t / Math.PI) * Math.log(2 * h / t);\r\n      \r\n      let z0;\r\n      if (weff / h <= 1) {\r\n        // Narrow trace\r\n        z0 = (60 / Math.sqrt(er)) * Math.log(8 * h / weff + weff / (4 * h));\r\n      } else {\r\n        // Wide trace\r\n        z0 = (120 * Math.PI) / (Math.sqrt(er) * (weff / h + 1.393 + 0.667 * Math.log(weff / h + 1.444)));\r\n      }\r\n      \r\n      // Effective dielectric constant\r\n      const erEff = (er + 1) / 2 + ((er - 1) / 2) * Math.pow(1 + 12 * h / weff, -0.5);\r\n      \r\n      // Phase velocity\r\n      const c = 299792458; // m/s\r\n      const vp = c / Math.sqrt(erEff);\r\n      \r\n      return {\r\n        impedance: Number(z0.toFixed(2)),\r\n        effectiveDielectric: Number(erEff.toFixed(3)),\r\n        phaseVelocity: Number((vp / 1e6).toFixed(1)), // Mm/s\r\n        wavelength: Number((vp / 1e9).toFixed(3)) // m at 1 GHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"via-calculator\",\r\n    name: \"Via Impedance Calculator\",\r\n    description: \"Calculate the impedance and current carrying capacity of vias\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"diameter\", label: \"Via Diameter\", unit: \"mm\", type: \"number\", min: 0.1, max: 2, default: 0.2 },\r\n      { id: \"height\", label: \"Via Height\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"padDiameter\", label: \"Pad Diameter\", unit: \"mm\", type: \"number\", min: 0.2, max: 3, default: 0.4 },\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 10, default: 1 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const diameter = inputs.diameter;\r\n      const height = inputs.height;\r\n      const current = inputs.current;\r\n      \r\n      const d = diameter;\r\n      const h = height;\r\n      \r\n      // Via impedance approximation\r\n      const impedance = 60 * Math.log(4 * h / d);\r\n      \r\n      // Current capacity (conservative estimate)\r\n      const area = Math.PI * Math.pow(d / 2, 2); // mm²\r\n      const currentCapacity = area * 2; // A/mm² rule of thumb\r\n      \r\n      // Thermal resistance\r\n      const thermalResistance = h / (237 * area); // K/W (copper thermal conductivity ≈ 237 W/m⋅K)\r\n      \r\n      // Temperature rise\r\n      const resistance = 1.7e-8 * h / (area * 1e-6); // ohms\r\n      const powerLoss = current * current * resistance;\r\n      const tempRise = powerLoss * thermalResistance;\r\n      \r\n      return {\r\n        impedance: Number(impedance.toFixed(2)),\r\n        currentCapacity: Number(currentCapacity.toFixed(2)),\r\n        resistance: Number((resistance * 1e6).toFixed(2)), // μΩ\r\n        temperatureRise: Number(tempRise.toFixed(1)),\r\n        safetyMargin: Number(((currentCapacity / current - 1) * 100).toFixed(1))\r\n      };\r\n    }\r\n  },\r\n  // Removed niche antenna dipole calculator to focus on PCB/mechanical value\r\n  {\r\n    id: \"lc-calculator\",\r\n    name: \"LC Resonant Circuit Calculator\",\r\n    description: \"Calculate resonant frequency and component values for LC circuits\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"inductance\", label: \"Inductance\", unit: \"μH\", type: \"number\", min: 0.001, max: 1000, default: 10 },\r\n      { id: \"capacitance\", label: \"Capacitance\", unit: \"pF\", type: \"number\", min: 0.1, max: 100000, default: 100 },\r\n      { id: \"resistance\", label: \"Series Resistance\", unit: \"Ω\", type: \"number\", min: 0.1, max: 1000, default: 10 },\r\n      { id: \"targetFreq\", label: \"Target Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 10000, default: 100 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { inductance, capacitance, resistance, targetFreq } = inputs;\r\n      \r\n      const L = inductance * 1e-6; // H\r\n      const C = capacitance * 1e-12; // F\r\n      const R = resistance; // Ω\r\n      const fTarget = targetFreq * 1e6; // Hz\r\n      \r\n      // Resonant frequency\r\n      const f0 = 1 / (2 * Math.PI * Math.sqrt(L * C)); // Hz\r\n      \r\n      // Q factor\r\n      const omega0 = 2 * Math.PI * f0;\r\n      const Q = omega0 * L / R;\r\n      \r\n      // Bandwidth\r\n      const bandwidth = f0 / Q; // Hz\r\n      \r\n      // Required L for target frequency (keeping C constant)\r\n      const LForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * C); // H\r\n      \r\n      // Required C for target frequency (keeping L constant)\r\n      const CForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * L); // F\r\n      \r\n      // Characteristic impedance\r\n      const Z0 = Math.sqrt(L / C); // Ω\r\n      \r\n      return {\r\n        resonantFreq: Number((f0 / 1e6).toFixed(3)), // MHz\r\n        qFactor: Number(Q.toFixed(1)),\r\n        bandwidth: Number((bandwidth / 1e3).toFixed(1)), // kHz\r\n        requiredL: Number((LForTarget * 1e6).toFixed(3)), // μH\r\n        requiredC: Number((CForTarget * 1e12).toFixed(1)), // pF\r\n        impedance: Number(Z0.toFixed(1)) // Ω\r\n      };\r\n    }\r\n  }\r\n  ,\r\n  {\r\n    id: \"heatsink-size\",\r\n    name: \"Heatsink Size Estimator\",\r\n    description: \"Estimate required thermal resistance (°C/W) and fin area\",\r\n    category: \"mechanical\",\r\n    inputs: [\r\n      { id: \"power\", label: \"Power Dissipation\", unit: \"W\", type: \"number\", min: 0.1, max: 500, default: 10 },\r\n      { id: \"tAmbient\", label: \"Ambient Temp\", unit: \"°C\", type: \"number\", min: -20, max: 60, default: 25 },\r\n      { id: \"tJunction\", label: \"Max Junction Temp\", unit: \"°C\", type: \"number\", min: 40, max: 150, default: 100 },\r\n      { id: \"thetaJC\", label: \"θJC\", unit: \"°C/W\", type: \"number\", min: 0.1, max: 10, default: 1.5 },\r\n      { id: \"thetaCS\", label: \"θCS\", unit: \"°C/W\", type: \"number\", min: 0.05, max: 2, default: 0.2 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const ΔT = inputs.tJunction - inputs.tAmbient;\r\n      const θ_total = ΔT / inputs.power;\r\n      const θSA = Math.max(0.1, θ_total - (inputs.thetaJC + inputs.thetaCS));\r\n      // Rough natural convection surface area estimate: θSA ≈ 50/A_dm2 (°C/W)\r\n      const A_dm2 = 50 / θSA; // dm^2\r\n      const A_cm2 = A_dm2 * 100; // cm^2\r\n      return {\r\n        thetaSA: Number(θSA.toFixed(2)),\r\n        estArea: Number(A_cm2.toFixed(0)),\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"bolt-preload\",\r\n    name: \"Bolt Preload & Torque\",\r\n    description: \"Estimate torque for target preload using K-factor\",\r\n    category: \"mechanical\",\r\n    inputs: [\r\n      { id: \"preload\", label: \"Target Preload\", unit: \"kN\", type: \"number\", min: 0.1, max: 200, default: 10 },\r\n      { id: \"diameter\", label: \"Bolt Diameter\", unit: \"mm\", type: \"number\", min: 2, max: 36, default: 8 },\r\n      { id: \"kFactor\", label: \"K-Factor\", unit: \"\", type: \"number\", min: 0.1, max: 0.4, default: 0.2 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const F = inputs.preload * 1000; // N\r\n      const d_m = inputs.diameter / 1000; // m\r\n      const T = inputs.kFactor * F * d_m; // N·m\r\n      return {\r\n        torqueNm: Number(T.toFixed(2)),\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"beam-deflection\",\r\n    name: \"Cantilever Beam Deflection\",\r\n    description: \"Tip deflection under end load\",\r\n    category: \"mechanical\",\r\n    inputs: [\r\n      { id: \"load\", label: \"End Load\", unit: \"N\", type: \"number\", min: 1, max: 50000, default: 100 },\r\n      { id: \"length\", label: \"Length\", unit: \"mm\", type: \"number\", min: 10, max: 2000, default: 200 },\r\n      { id: \"width\", label: \"Width\", unit: \"mm\", type: \"number\", min: 1, max: 200, default: 20 },\r\n      { id: \"thickness\", label: \"Thickness\", unit: \"mm\", type: \"number\", min: 1, max: 200, default: 5 },\r\n      { id: \"E\", label: \"Young's Modulus\", unit: \"GPa\", type: \"number\", min: 1, max: 300, default: 200 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const F = inputs.load; // N\r\n      const L = inputs.length / 1000; // m\r\n      const b = inputs.width / 1000; // m\r\n      const h = inputs.thickness / 1000; // m\r\n      const E = inputs.E * 1e9; // Pa\r\n      const I = (b * Math.pow(h, 3)) / 12; // m^4\r\n      const delta = (F * Math.pow(L, 3)) / (3 * E * I); // m\r\n      return {\r\n        deflection: Number((delta * 1000).toFixed(3)) // mm\r\n      };\r\n    }\r\n  }\r\n];\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}