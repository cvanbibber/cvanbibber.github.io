{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\cvanbibber.github.io\\\\src\\\\components\\\\CircuitField.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { useReducedMotion } from 'motion/react';\n\n/**\r\n * CircuitField: Electronics-themed interactive background (optimized)\r\n * - Static canvas: PCB-like grid and copper traces (wires)\r\n * - Dynamic canvas: electrons (carriers) flowing along traces + subtle node motion\r\n * - Cursor = charged probe (repel by default, hold Alt to attract)\r\n * - Pauses offscreen, respects Reduced Motion. Lower density and no heavy blur for perf.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CircuitField = () => {\n  _s();\n  const staticRef = useRef(null);\n  const dynamicRef = useRef(null);\n  const runningRef = useRef(false);\n  const rafRef = useRef(null);\n  const reduceMotion = useReducedMotion();\n  const mouse = useRef({\n    x: 0,\n    y: 0,\n    active: false,\n    attract: false\n  });\n  const dprRef = useRef(1);\n\n  // Internal simulation state\n  const stateRef = useRef(null);\n  const rand = (min, max) => Math.random() * (max - min) + min;\n  const init = useCallback(() => {\n    const staticCanvas = staticRef.current;\n    const dynamicCanvas = dynamicRef.current;\n    if (!staticCanvas || !dynamicCanvas) return;\n    const rect = staticCanvas.getBoundingClientRect();\n    const dpr = Math.min(window.devicePixelRatio || 1, 1.5); // cap for perf\n    dprRef.current = dpr;\n    const width = Math.floor(rect.width * dpr);\n    const height = Math.floor(rect.height * dpr);\n    staticCanvas.width = width;\n    staticCanvas.height = height;\n    dynamicCanvas.width = width;\n    dynamicCanvas.height = height;\n    const w = width;\n    const h = height;\n\n    // Lower density for performance\n    const targetCols = Math.max(12, Math.min(18, Math.floor(rect.width / 70)));\n    const targetRows = Math.max(7, Math.min(12, Math.floor(rect.height / 70)));\n    const cols = targetCols;\n    const rows = targetRows;\n    const xStep = w / (cols + 1);\n    const yStep = h / (rows + 1);\n    const nodes = [];\n    for (let j = 0; j < rows; j++) {\n      for (let i = 0; i < cols; i++) {\n        const x0 = (i + 1) * xStep + rand(-0.05, 0.05) * xStep;\n        const y0 = (j + 1) * yStep + rand(-0.05, 0.05) * yStep;\n        nodes.push({\n          x: x0,\n          y: y0,\n          x0,\n          y0,\n          vx: 0,\n          vy: 0\n        });\n      }\n    }\n    const idx = (i, j) => j * cols + i;\n\n    // Only right and down connections; fewer carriers\n    const edges = [];\n    for (let j = 0; j < rows; j++) {\n      for (let i = 0; i < cols; i++) {\n        const a = idx(i, j);\n        const connect = (ii, jj) => {\n          if (ii >= 0 && ii < cols && jj >= 0 && jj < rows) {\n            const b = idx(ii, jj);\n            if (a < b) {\n              // Only put carriers on some edges for subtlety\n              const hasCarrier = Math.random() < 0.35;\n              const carriers = hasCarrier ? [{\n                t: Math.random(),\n                v: rand(0.00035, 0.001)\n              }] : [];\n              edges.push({\n                a,\n                b,\n                carriers\n              });\n            }\n          }\n        };\n        connect(i + 1, j); // right\n        connect(i, j + 1); // down\n      }\n    }\n    stateRef.current = {\n      nodes,\n      edges,\n      w,\n      h\n    };\n\n    // Draw static once: background grid + traces\n    const sctx = staticCanvas.getContext('2d');\n    if (!sctx) return;\n    sctx.clearRect(0, 0, w, h);\n\n    // Subtle board grid\n    sctx.globalAlpha = 0.18;\n    sctx.strokeStyle = '#0891b2'; // cyan-700-ish\n    sctx.lineWidth = 1 * dpr;\n    const grid = 72 * dpr;\n    for (let x = 0; x < w; x += grid) {\n      sctx.beginPath();\n      sctx.moveTo(x, 0);\n      sctx.lineTo(x, h);\n      sctx.stroke();\n    }\n    for (let y = 0; y < h; y += grid) {\n      sctx.beginPath();\n      sctx.moveTo(0, y);\n      sctx.lineTo(w, y);\n      sctx.stroke();\n    }\n\n    // Copper traces (wires)\n    sctx.globalAlpha = 1;\n    sctx.strokeStyle = 'rgba(30, 64, 175, 0.25)'; // blue-800 low-alpha\n    sctx.lineWidth = 1 * dpr;\n    for (let e = 0; e < edges.length; e++) {\n      const edge = edges[e];\n      // only draw if near-horizontal/vertical lines (they are by construction)\n      const a = nodes[edge.a];\n      const b = nodes[edge.b];\n      sctx.beginPath();\n      sctx.moveTo(a.x, a.y);\n      sctx.lineTo(b.x, b.y);\n      sctx.stroke();\n    }\n\n    // Junction pads (very subtle)\n    sctx.fillStyle = 'rgba(59, 130, 246, 0.5)'; // blue-500\n    for (let i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      sctx.beginPath();\n      sctx.arc(n.x, n.y, 1.2 * dpr, 0, Math.PI * 2);\n      sctx.fill();\n    }\n  }, []);\n  const step = dt => {\n    const st = stateRef.current;\n    const canvas = dynamicRef.current;\n    if (!st || !canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const {\n      nodes,\n      edges,\n      w,\n      h\n    } = st;\n    const dpr = dprRef.current;\n\n    // Physics parameters (subtle)\n    const spring = 0.006;\n    const damping = 0.94;\n    const mouseForce = 7000;\n    const influenceR2 = 140 * dpr * (140 * dpr);\n\n    // Update nodes (small drift, slight response to cursor)\n    for (let i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      const ax = (n.x0 - n.x) * spring;\n      const ay = (n.y0 - n.y) * spring;\n      let fx = ax,\n        fy = ay;\n      if (mouse.current.active) {\n        const dx = mouse.current.x * dpr - n.x;\n        const dy = mouse.current.y * dpr - n.y;\n        const r2 = dx * dx + dy * dy + 0.001;\n        if (r2 < influenceR2) {\n          const inv = 1 / Math.sqrt(r2);\n          const dirx = dx * inv;\n          const diry = dy * inv;\n          const sign = mouse.current.attract ? 1 : -1;\n          const mag = mouseForce / r2 * sign;\n          fx += dirx * mag;\n          fy += diry * mag;\n        }\n      }\n      n.vx = (n.vx + fx) * damping;\n      n.vy = (n.vy + fy) * damping;\n      n.x += n.vx * dt;\n      n.y += n.vy * dt;\n    }\n\n    // Clear dynamic layer\n    ctx.clearRect(0, 0, w, h);\n\n    // Draw carriers (electrons) as tiny cyan dots with faint trail effect\n    ctx.fillStyle = 'rgba(6,182,212,0.9)'; // cyan-500\n    for (let e = 0; e < edges.length; e++) {\n      const edge = edges[e];\n      if (edge.carriers.length === 0) continue;\n      const a = nodes[edge.a];\n      const b = nodes[edge.b];\n      const ex = b.x - a.x;\n      const ey = b.y - a.y;\n      for (let c = 0; c < edge.carriers.length; c++) {\n        const carrier = edge.carriers[c];\n        carrier.t += carrier.v * dt;\n        if (carrier.t > 1) carrier.t -= 1;\n        const x = a.x + ex * carrier.t;\n        const y = a.y + ey * carrier.t;\n        // main electron dot\n        ctx.beginPath();\n        ctx.arc(x, y, 1.4 * dpr, 0, Math.PI * 2);\n        ctx.fill();\n        // faint forward glow line to suggest flow direction (very subtle)\n        ctx.strokeStyle = 'rgba(6,182,212,0.25)';\n        ctx.lineWidth = 1 * dpr;\n        ctx.beginPath();\n        ctx.moveTo(x - ex * 0.02, y - ey * 0.02);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n      }\n    }\n\n    // Draw nodes minimal (small pads, no shadow)\n    ctx.fillStyle = 'rgba(59, 130, 246, 0.6)';\n    for (let i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      ctx.beginPath();\n      ctx.arc(n.x, n.y, 1.1 * dpr, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Cursor ring (smaller and subtler)\n    if (mouse.current.active) {\n      ctx.globalAlpha = 0.5;\n      ctx.strokeStyle = mouse.current.attract ? 'rgba(34,197,94,0.7)' : 'rgba(239,68,68,0.7)';\n      ctx.lineWidth = 1.5 * dpr;\n      ctx.beginPath();\n      ctx.arc(mouse.current.x * dpr, mouse.current.y * dpr, 14 * dpr, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n    }\n  };\n  useEffect(() => {\n    const sCanvas = staticRef.current;\n    const dCanvas = dynamicRef.current;\n    if (!sCanvas || !dCanvas) return;\n    if (reduceMotion) {\n      // Reduced motion: draw static only\n      init();\n      return;\n    }\n    init();\n    let last = performance.now();\n    let accum = 0;\n    const tick = now => {\n      if (!runningRef.current) return;\n      const frame = now - last;\n      last = now;\n      accum += frame;\n      // Update at ~30fps for perf, render when updated\n      if (accum >= 33) {\n        const dt = Math.min(33, accum);\n        accum = 0;\n        step(dt);\n      }\n      rafRef.current = requestAnimationFrame(tick);\n    };\n    const start = () => {\n      if (runningRef.current) return;\n      runningRef.current = true;\n      last = performance.now();\n      rafRef.current = requestAnimationFrame(tick);\n    };\n    const stop = () => {\n      runningRef.current = false;\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\n      rafRef.current = null;\n    };\n\n    // Intersection Observer to pause when offscreen\n    const io = new IntersectionObserver(entries => {\n      for (const e of entries) {\n        if (e.isIntersecting) start();else stop();\n      }\n    }, {\n      root: null,\n      threshold: 0.05\n    });\n    io.observe(dCanvas);\n\n    // Resize handler\n    const onResize = () => {\n      init();\n    };\n    window.addEventListener('resize', onResize);\n\n    // Mouse and keyboard for interaction\n    const onMove = e => {\n      mouse.current.x = e.clientX;\n      mouse.current.y = e.clientY;\n      mouse.current.active = true;\n    };\n    const onLeave = () => {\n      mouse.current.active = false;\n    };\n    const onKey = e => {\n      // Hold Alt to attract (green ring), release for repulsion (red)\n      mouse.current.attract = e.altKey;\n    };\n    window.addEventListener('mousemove', onMove);\n    window.addEventListener('mouseleave', onLeave);\n    window.addEventListener('keydown', onKey);\n    window.addEventListener('keyup', onKey);\n    return () => {\n      stop();\n      io.disconnect();\n      window.removeEventListener('resize', onResize);\n      window.removeEventListener('mousemove', onMove);\n      window.removeEventListener('mouseleave', onLeave);\n      window.removeEventListener('keydown', onKey);\n      window.removeEventListener('keyup', onKey);\n    };\n  }, [reduceMotion, init]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute inset-0 w-full h-full pointer-events-none select-none\",\n    \"aria-hidden\": true,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: staticRef,\n      className: \"absolute inset-0 w-full h-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: dynamicRef,\n      className: \"absolute inset-0 w-full h-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(CircuitField, \"X5ndUBbkb6OWuCOtYaX1HnVYR2Y=\", false, function () {\n  return [useReducedMotion];\n});\n_c = CircuitField;\nexport default CircuitField;\nvar _c;\n$RefreshReg$(_c, \"CircuitField\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","useReducedMotion","jsxDEV","_jsxDEV","CircuitField","_s","staticRef","dynamicRef","runningRef","rafRef","reduceMotion","mouse","x","y","active","attract","dprRef","stateRef","rand","min","max","Math","random","init","staticCanvas","current","dynamicCanvas","rect","getBoundingClientRect","dpr","window","devicePixelRatio","width","floor","height","w","h","targetCols","targetRows","cols","rows","xStep","yStep","nodes","j","i","x0","y0","push","vx","vy","idx","edges","a","connect","ii","jj","b","hasCarrier","carriers","t","v","sctx","getContext","clearRect","globalAlpha","strokeStyle","lineWidth","grid","beginPath","moveTo","lineTo","stroke","e","length","edge","fillStyle","n","arc","PI","fill","step","dt","st","canvas","ctx","spring","damping","mouseForce","influenceR2","ax","ay","fx","fy","dx","dy","r2","inv","sqrt","dirx","diry","sign","mag","ex","ey","c","carrier","sCanvas","dCanvas","last","performance","now","accum","tick","frame","requestAnimationFrame","start","stop","cancelAnimationFrame","io","IntersectionObserver","entries","isIntersecting","root","threshold","observe","onResize","addEventListener","onMove","clientX","clientY","onLeave","onKey","altKey","disconnect","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Github/cvanbibber.github.io/src/components/CircuitField.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\r\nimport { useReducedMotion } from 'motion/react';\r\n\r\n/**\r\n * CircuitField: Electronics-themed interactive background (optimized)\r\n * - Static canvas: PCB-like grid and copper traces (wires)\r\n * - Dynamic canvas: electrons (carriers) flowing along traces + subtle node motion\r\n * - Cursor = charged probe (repel by default, hold Alt to attract)\r\n * - Pauses offscreen, respects Reduced Motion. Lower density and no heavy blur for perf.\r\n */\r\nconst CircuitField: React.FC = () => {\r\n  const staticRef = useRef<HTMLCanvasElement | null>(null);\r\n  const dynamicRef = useRef<HTMLCanvasElement | null>(null);\r\n  const runningRef = useRef(false);\r\n  const rafRef = useRef<number | null>(null);\r\n  const reduceMotion = useReducedMotion();\r\n\r\n  const mouse = useRef({ x: 0, y: 0, active: false, attract: false });\r\n  const dprRef = useRef<number>(1);\r\n\r\n  // Internal simulation state\r\n  const stateRef = useRef<{\r\n    nodes: Array<{ x: number; y: number; x0: number; y0: number; vx: number; vy: number }>;\r\n    // only right and down connections for clearer circuit feel\r\n    edges: Array<{ a: number; b: number; carriers: Array<{ t: number; v: number }> }>;\r\n    w: number;\r\n    h: number;\r\n  } | null>(null);\r\n\r\n  const rand = (min: number, max: number) => Math.random() * (max - min) + min;\r\n\r\n  const init = useCallback(() => {\r\n    const staticCanvas = staticRef.current;\r\n    const dynamicCanvas = dynamicRef.current;\r\n    if (!staticCanvas || !dynamicCanvas) return;\r\n\r\n    const rect = staticCanvas.getBoundingClientRect();\r\n    const dpr = Math.min(window.devicePixelRatio || 1, 1.5); // cap for perf\r\n    dprRef.current = dpr;\r\n\r\n    const width = Math.floor(rect.width * dpr);\r\n    const height = Math.floor(rect.height * dpr);\r\n    staticCanvas.width = width; staticCanvas.height = height;\r\n    dynamicCanvas.width = width; dynamicCanvas.height = height;\r\n\r\n    const w = width;\r\n    const h = height;\r\n\r\n    // Lower density for performance\r\n    const targetCols = Math.max(12, Math.min(18, Math.floor(rect.width / 70)));\r\n    const targetRows = Math.max(7, Math.min(12, Math.floor(rect.height / 70)));\r\n    const cols = targetCols;\r\n    const rows = targetRows;\r\n    const xStep = w / (cols + 1);\r\n    const yStep = h / (rows + 1);\r\n\r\n    const nodes: Array<{ x: number; y: number; x0: number; y0: number; vx: number; vy: number }> = [];\r\n\r\n    for (let j = 0; j < rows; j++) {\r\n      for (let i = 0; i < cols; i++) {\r\n        const x0 = (i + 1) * xStep + rand(-0.05, 0.05) * xStep;\r\n        const y0 = (j + 1) * yStep + rand(-0.05, 0.05) * yStep;\r\n        nodes.push({ x: x0, y: y0, x0, y0, vx: 0, vy: 0 });\r\n      }\r\n    }\r\n\r\n    const idx = (i: number, j: number) => j * cols + i;\r\n\r\n    // Only right and down connections; fewer carriers\r\n    const edges: Array<{ a: number; b: number; carriers: Array<{ t: number; v: number }> }> = [];\r\n    for (let j = 0; j < rows; j++) {\r\n      for (let i = 0; i < cols; i++) {\r\n        const a = idx(i, j);\r\n        const connect = (ii: number, jj: number) => {\r\n          if (ii >= 0 && ii < cols && jj >= 0 && jj < rows) {\r\n            const b = idx(ii, jj);\r\n            if (a < b) {\r\n              // Only put carriers on some edges for subtlety\r\n              const hasCarrier = Math.random() < 0.35;\r\n              const carriers = hasCarrier\r\n                ? [{ t: Math.random(), v: rand(0.00035, 0.001) }]\r\n                : [];\r\n              edges.push({ a, b, carriers });\r\n            }\r\n          }\r\n        };\r\n        connect(i + 1, j); // right\r\n        connect(i, j + 1); // down\r\n      }\r\n    }\r\n\r\n    stateRef.current = { nodes, edges, w, h };\r\n\r\n    // Draw static once: background grid + traces\r\n    const sctx = staticCanvas.getContext('2d');\r\n    if (!sctx) return;\r\n    sctx.clearRect(0, 0, w, h);\r\n\r\n    // Subtle board grid\r\n    sctx.globalAlpha = 0.18;\r\n    sctx.strokeStyle = '#0891b2'; // cyan-700-ish\r\n    sctx.lineWidth = 1 * dpr;\r\n    const grid = 72 * dpr;\r\n    for (let x = 0; x < w; x += grid) { sctx.beginPath(); sctx.moveTo(x, 0); sctx.lineTo(x, h); sctx.stroke(); }\r\n    for (let y = 0; y < h; y += grid) { sctx.beginPath(); sctx.moveTo(0, y); sctx.lineTo(w, y); sctx.stroke(); }\r\n\r\n    // Copper traces (wires)\r\n    sctx.globalAlpha = 1;\r\n    sctx.strokeStyle = 'rgba(30, 64, 175, 0.25)'; // blue-800 low-alpha\r\n    sctx.lineWidth = 1 * dpr;\r\n    for (let e = 0; e < edges.length; e++) {\r\n      const edge = edges[e];\r\n      // only draw if near-horizontal/vertical lines (they are by construction)\r\n      const a = nodes[edge.a];\r\n      const b = nodes[edge.b];\r\n      sctx.beginPath(); sctx.moveTo(a.x, a.y); sctx.lineTo(b.x, b.y); sctx.stroke();\r\n    }\r\n\r\n    // Junction pads (very subtle)\r\n    sctx.fillStyle = 'rgba(59, 130, 246, 0.5)'; // blue-500\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const n = nodes[i];\r\n      sctx.beginPath(); sctx.arc(n.x, n.y, 1.2 * dpr, 0, Math.PI * 2); sctx.fill();\r\n    }\r\n  }, []);\r\n\r\n  const step = (dt: number) => {\r\n    const st = stateRef.current;\r\n    const canvas = dynamicRef.current;\r\n    if (!st || !canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const { nodes, edges, w, h } = st;\r\n    const dpr = dprRef.current;\r\n\r\n    // Physics parameters (subtle)\r\n    const spring = 0.006;\r\n    const damping = 0.94;\r\n    const mouseForce = 7000;\r\n    const influenceR2 = (140 * dpr) * (140 * dpr);\r\n\r\n    // Update nodes (small drift, slight response to cursor)\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const n = nodes[i];\r\n      const ax = (n.x0 - n.x) * spring;\r\n      const ay = (n.y0 - n.y) * spring;\r\n      let fx = ax, fy = ay;\r\n      if (mouse.current.active) {\r\n        const dx = (mouse.current.x * dpr) - n.x;\r\n        const dy = (mouse.current.y * dpr) - n.y;\r\n        const r2 = dx * dx + dy * dy + 0.001;\r\n        if (r2 < influenceR2) {\r\n          const inv = 1 / Math.sqrt(r2);\r\n          const dirx = dx * inv;\r\n          const diry = dy * inv;\r\n          const sign = mouse.current.attract ? 1 : -1;\r\n          const mag = (mouseForce / r2) * sign;\r\n          fx += dirx * mag;\r\n          fy += diry * mag;\r\n        }\r\n      }\r\n      n.vx = (n.vx + fx) * damping;\r\n      n.vy = (n.vy + fy) * damping;\r\n      n.x += n.vx * dt;\r\n      n.y += n.vy * dt;\r\n    }\r\n\r\n    // Clear dynamic layer\r\n    ctx.clearRect(0, 0, w, h);\r\n\r\n    // Draw carriers (electrons) as tiny cyan dots with faint trail effect\r\n    ctx.fillStyle = 'rgba(6,182,212,0.9)'; // cyan-500\r\n    for (let e = 0; e < edges.length; e++) {\r\n      const edge = edges[e];\r\n      if (edge.carriers.length === 0) continue;\r\n      const a = nodes[edge.a];\r\n      const b = nodes[edge.b];\r\n      const ex = b.x - a.x;\r\n      const ey = b.y - a.y;\r\n      for (let c = 0; c < edge.carriers.length; c++) {\r\n        const carrier = edge.carriers[c];\r\n        carrier.t += carrier.v * dt;\r\n        if (carrier.t > 1) carrier.t -= 1;\r\n        const x = a.x + ex * carrier.t;\r\n        const y = a.y + ey * carrier.t;\r\n        // main electron dot\r\n        ctx.beginPath(); ctx.arc(x, y, 1.4 * dpr, 0, Math.PI * 2); ctx.fill();\r\n        // faint forward glow line to suggest flow direction (very subtle)\r\n        ctx.strokeStyle = 'rgba(6,182,212,0.25)';\r\n        ctx.lineWidth = 1 * dpr;\r\n        ctx.beginPath(); ctx.moveTo(x - ex * 0.02, y - ey * 0.02); ctx.lineTo(x, y); ctx.stroke();\r\n      }\r\n    }\r\n\r\n    // Draw nodes minimal (small pads, no shadow)\r\n    ctx.fillStyle = 'rgba(59, 130, 246, 0.6)';\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const n = nodes[i];\r\n      ctx.beginPath(); ctx.arc(n.x, n.y, 1.1 * dpr, 0, Math.PI * 2); ctx.fill();\r\n    }\r\n\r\n    // Cursor ring (smaller and subtler)\r\n    if (mouse.current.active) {\r\n      ctx.globalAlpha = 0.5;\r\n      ctx.strokeStyle = mouse.current.attract ? 'rgba(34,197,94,0.7)' : 'rgba(239,68,68,0.7)';\r\n      ctx.lineWidth = 1.5 * dpr;\r\n      ctx.beginPath(); ctx.arc(mouse.current.x * dpr, mouse.current.y * dpr, 14 * dpr, 0, Math.PI * 2); ctx.stroke();\r\n      ctx.globalAlpha = 1;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sCanvas = staticRef.current;\r\n    const dCanvas = dynamicRef.current;\r\n    if (!sCanvas || !dCanvas) return;\r\n\r\n    if (reduceMotion) {\r\n      // Reduced motion: draw static only\r\n      init();\r\n      return;\r\n    }\r\n\r\n    init();\r\n\r\n    let last = performance.now();\r\n    let accum = 0;\r\n    const tick = (now: number) => {\r\n      if (!runningRef.current) return;\r\n      const frame = now - last;\r\n      last = now;\r\n      accum += frame;\r\n      // Update at ~30fps for perf, render when updated\r\n      if (accum >= 33) {\r\n        const dt = Math.min(33, accum);\r\n        accum = 0;\r\n        step(dt);\r\n      }\r\n      rafRef.current = requestAnimationFrame(tick);\r\n    };\r\n\r\n    const start = () => {\r\n      if (runningRef.current) return;\r\n      runningRef.current = true;\r\n      last = performance.now();\r\n      rafRef.current = requestAnimationFrame(tick);\r\n    };\r\n    const stop = () => {\r\n      runningRef.current = false;\r\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\r\n      rafRef.current = null;\r\n    };\r\n\r\n    // Intersection Observer to pause when offscreen\r\n  const io = new IntersectionObserver(\r\n      (entries) => {\r\n        for (const e of entries) {\r\n          if (e.isIntersecting) start();\r\n          else stop();\r\n        }\r\n      },\r\n      { root: null, threshold: 0.05 }\r\n    );\r\n  io.observe(dCanvas);\r\n\r\n    // Resize handler\r\n  const onResize = () => { init(); };\r\n    window.addEventListener('resize', onResize);\r\n\r\n    // Mouse and keyboard for interaction\r\n    const onMove = (e: MouseEvent) => {\r\n      mouse.current.x = e.clientX;\r\n      mouse.current.y = e.clientY;\r\n      mouse.current.active = true;\r\n    };\r\n    const onLeave = () => { mouse.current.active = false; };\r\n    const onKey = (e: KeyboardEvent) => {\r\n      // Hold Alt to attract (green ring), release for repulsion (red)\r\n      mouse.current.attract = e.altKey;\r\n    };\r\n\r\n    window.addEventListener('mousemove', onMove);\r\n    window.addEventListener('mouseleave', onLeave);\r\n    window.addEventListener('keydown', onKey);\r\n    window.addEventListener('keyup', onKey);\r\n\r\n    return () => {\r\n      stop();\r\n      io.disconnect();\r\n      window.removeEventListener('resize', onResize);\r\n      window.removeEventListener('mousemove', onMove);\r\n      window.removeEventListener('mouseleave', onLeave);\r\n      window.removeEventListener('keydown', onKey);\r\n      window.removeEventListener('keyup', onKey);\r\n    };\r\n  }, [reduceMotion, init]);\r\n\r\n  return (\r\n    <div className=\"absolute inset-0 w-full h-full pointer-events-none select-none\" aria-hidden>\r\n      <canvas ref={staticRef} className=\"absolute inset-0 w-full h-full\" />\r\n      <canvas ref={dynamicRef} className=\"absolute inset-0 w-full h-full\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircuitField;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}