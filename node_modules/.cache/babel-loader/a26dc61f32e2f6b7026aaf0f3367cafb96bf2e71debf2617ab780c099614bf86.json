{"ast":null,"code":"export const engineeringTools = [{\n  id: \"trace-width-calculator\",\n  name: \"PCB Trace Width Calculator\",\n  description: \"Calculate the required trace width for a given current and temperature rise\",\n  category: \"general\",\n  inputs: [{\n    id: \"current\",\n    label: \"Current\",\n    unit: \"A\",\n    type: \"number\",\n    min: 0.1,\n    max: 100,\n    default: 1\n  }, {\n    id: \"tempRise\",\n    label: \"Temperature Rise\",\n    unit: \"°C\",\n    type: \"number\",\n    min: 1,\n    max: 100,\n    default: 10\n  }, {\n    id: \"copperThickness\",\n    label: \"Copper Thickness\",\n    unit: \"oz\",\n    type: \"number\",\n    min: 0.5,\n    max: 4,\n    default: 1\n  }, {\n    id: \"traceLength\",\n    label: \"Trace Length\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 1,\n    max: 1000,\n    default: 50\n  }],\n  calculate: inputs => {\n    const {\n      current,\n      tempRise,\n      copperThickness,\n      traceLength\n    } = inputs;\n\n    // IPC-2221 formula for external traces\n    const area = Math.pow(current / (0.048 * Math.pow(tempRise, 0.44)), 1 / 0.725);\n\n    // Convert area to width (thickness = copper thickness * 0.0347mm/oz)\n    const thickness = copperThickness * 0.0347; // mm\n    const width = area / thickness;\n\n    // Calculate resistance and voltage drop\n    const resistivity = 1.7e-8; // ohm⋅m for copper\n    const resistance = resistivity * traceLength * 1e-3 / (area * 1e-6); // ohms\n    const voltageDrop = current * resistance;\n    const powerLoss = current * current * resistance;\n    return {\n      traceWidth: Number(width.toFixed(3)),\n      traceArea: Number(area.toFixed(3)),\n      resistance: Number((resistance * 1000).toFixed(3)),\n      // mΩ\n      voltageDrop: Number((voltageDrop * 1000).toFixed(3)),\n      // mV\n      powerLoss: Number((powerLoss * 1000).toFixed(3)) // mW\n    };\n  }\n}, {\n  id: \"diff-impedance-calculator\",\n  name: \"Differential Pair Impedance (Microstrip)\",\n  description: \"Estimate single-ended and differential impedance with spacing suggestion\",\n  category: \"impedance\",\n  inputs: [{\n    id: \"width\",\n    label: \"Trace Width\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.05,\n    max: 10,\n    default: 0.2\n  }, {\n    id: \"height\",\n    label: \"Substrate Thickness (h)\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 5,\n    default: 1.6\n  }, {\n    id: \"dielectric\",\n    label: \"Dielectric Constant (εr)\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 20,\n    default: 4.2\n  }, {\n    id: \"copperThickness\",\n    label: \"Copper Thickness\",\n    unit: \"µm\",\n    type: \"number\",\n    min: 10,\n    max: 105,\n    default: 35\n  }, {\n    id: \"spacing\",\n    label: \"Pair Spacing (s)\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.05,\n    max: 10,\n    default: 0.2\n  }, {\n    id: \"targetZdiff\",\n    label: \"Target Zdiff\",\n    unit: \"Ω\",\n    type: \"number\",\n    min: 50,\n    max: 150,\n    default: 100\n  }],\n  calculate: inputs => {\n    const {\n      width,\n      height,\n      dielectric,\n      copperThickness,\n      spacing,\n      targetZdiff\n    } = inputs;\n    const w = width;\n    const h = height;\n    const er = dielectric;\n    const t = (copperThickness || 35) / 1000; // mm\n\n    // Effective width (Hammerstad/Jensen approx.)\n    const weff = w + t / Math.PI * Math.log(1 + 4 * Math.E / (t / h * (1 / Math.tanh(Math.sqrt(6.517 * w / t)))));\n    const u = weff / h;\n    const z0 = u <= 1 ? 60 / Math.sqrt(er) * Math.log(8 / u + u / 4) : 120 * Math.PI / (Math.sqrt(er) * (u + 1.393 + 0.667 * Math.log(u + 1.444)));\n\n    // Differential impedance approximation for coupled microstrip\n    const s = spacing / h;\n    const k = 0.48 * Math.exp(-0.96 * s);\n    const zdiff = 2 * z0 * (1 - k);\n\n    // Find recommended spacing for target Zdiff by simple search\n    let bestS = spacing;\n    let bestErr = Math.abs(zdiff - targetZdiff);\n    for (let sTest = 0.05; sTest <= 5 * h; sTest += Math.max(0.01, 0.02 * h)) {\n      const st = sTest / h;\n      const kd = 0.48 * Math.exp(-0.96 * st);\n      const zdt = 2 * z0 * (1 - kd);\n      const err = Math.abs(zdt - targetZdiff);\n      if (err < bestErr) {\n        bestErr = err;\n        bestS = sTest;\n      }\n    }\n    return {\n      z0Single: Number(z0.toFixed(2)),\n      zDiff: Number(zdiff.toFixed(2)),\n      recSpacing: Number(bestS.toFixed(3))\n    };\n  }\n}, {\n  id: \"via-current-thermal\",\n  name: \"Via Current & Thermal Estimator\",\n  description: \"Estimate via resistance, current per via, and temperature rise\",\n  category: \"power\",\n  inputs: [{\n    id: \"holeDiameter\",\n    label: \"Hole Diameter\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.15,\n    max: 1.0,\n    default: 0.3\n  }, {\n    id: \"plating\",\n    label: \"Plating Thickness\",\n    unit: \"µm\",\n    type: \"number\",\n    min: 15,\n    max: 35,\n    default: 25\n  }, {\n    id: \"height\",\n    label: \"Board Thickness\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.6,\n    max: 2.4,\n    default: 1.6\n  }, {\n    id: \"count\",\n    label: \"Vias in Parallel\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 100,\n    default: 1\n  }, {\n    id: \"current\",\n    label: \"Total Current\",\n    unit: \"A\",\n    type: \"number\",\n    min: 0.1,\n    max: 30,\n    default: 2\n  }],\n  calculate: inputs => {\n    const d_mm = inputs.holeDiameter;\n    const t_mm = (inputs.plating || 25) / 1000; // mm\n    const h_mm = inputs.height;\n    const n = Math.max(1, Math.floor(inputs.count));\n    const I = inputs.current;\n\n    // Cross-sectional ring area (thin-wall approximation): A ≈ π * d * t\n    const area_mm2 = Math.PI * d_mm * t_mm; // mm^2\n    const area_m2 = area_mm2 * 1e-6; // m^2\n    const L_m = h_mm / 1000; // m\n    const rho = 1.7e-8; // Ω·m (copper)\n\n    const R_via = rho * L_m / area_m2; // Ω per via\n    const I_per = I / n; // A\n\n    // Rough thermal resistance K/W (very approximate)\n    const k_cu = 237; // W/m·K\n    const Rth = L_m / (k_cu * area_m2); // K/W\n    const P_per = I_per * I_per * R_via; // W\n    const dT = P_per * Rth; // °C\n\n    return {\n      rPerVia: Number((R_via * 1000).toFixed(3)),\n      // mΩ\n      currentPerVia: Number(I_per.toFixed(2)),\n      temperatureRise: Number(dT.toFixed(1)),\n      safetyMargin: Number((Math.max(0, 40 - dT) / 40 * 100).toFixed(0)) // vs. 40°C headroom\n    };\n  }\n}, {\n  id: \"decap-optimizer\",\n  name: \"Decoupling Capacitor Optimizer\",\n  description: \"Suggest cap mix to meet target impedance over frequency\",\n  category: \"power\",\n  inputs: [{\n    id: \"fMin\",\n    label: \"Min Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 0.1,\n    max: 1000,\n    default: 1\n  }, {\n    id: \"fMax\",\n    label: \"Max Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 1,\n    max: 5000,\n    default: 100\n  }, {\n    id: \"zTarget\",\n    label: \"Target Impedance\",\n    unit: \"mΩ\",\n    type: \"number\",\n    min: 1,\n    max: 500,\n    default: 50\n  }],\n  calculate: inputs => {\n    const fMaxHz = inputs.fMax * 1e6;\n    const Zt = inputs.zTarget / 1000; // Ω\n    // C_total required at fMax: Z = 1/(2π f C)\n    const C_total = 1 / (2 * Math.PI * fMaxHz * Zt); // F\n    const C_uF = C_total * 1e6;\n    // Split: 60% small (0.1uF), 30% mid (1uF), 10% bulk (10uF)\n    const n100n = Math.ceil(0.6 * C_uF / 0.1);\n    const n1u = Math.ceil(0.3 * C_uF / 1);\n    const n10u = Math.max(1, Math.ceil(0.1 * C_uF / 10));\n    return {\n      totalCap: Number(C_uF.toFixed(2)),\n      n100n: n100n,\n      n1u: n1u,\n      n10u: n10u\n    };\n  }\n}, {\n  id: \"snubber-calculator\",\n  name: \"Switching Regulator Snubber\",\n  description: \"Suggest RC snubber from ringing frequency and parasitic C\",\n  category: \"power\",\n  inputs: [{\n    id: \"fRing\",\n    label: \"Ringing Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 0.1,\n    max: 100,\n    default: 10\n  }, {\n    id: \"cPar\",\n    label: \"Parasitic Capacitance\",\n    unit: \"nF\",\n    type: \"number\",\n    min: 0.5,\n    max: 100,\n    default: 10\n  }],\n  calculate: inputs => {\n    const fHz = inputs.fRing * 1e6;\n    const Cpar = inputs.cPar * 1e-9;\n    const L = 1 / ((2 * Math.PI * fHz) ** 2 * Cpar); // H\n    const Csnub = 2 * Cpar; // F (rule of thumb)\n    const Rs = 1 / (2 * Math.PI * fHz * Csnub); // Ω\n    return {\n      lStray: Number((L * 1e6).toFixed(3)),\n      // µH\n      cSnub: Number((Csnub * 1e9).toFixed(2)),\n      // nF\n      rSnub: Number(Rs.toFixed(1)) // Ω\n    };\n  }\n}, {\n  id: \"plane-drop\",\n  name: \"PCB Power Plane Voltage Drop\",\n  description: \"Estimate plane resistance, voltage drop, and power loss\",\n  category: \"power\",\n  inputs: [{\n    id: \"length\",\n    label: \"Current Path Length\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 1,\n    max: 1000,\n    default: 100\n  }, {\n    id: \"width\",\n    label: \"Effective Width\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.5,\n    max: 100,\n    default: 20\n  }, {\n    id: \"copperOz\",\n    label: \"Copper Weight\",\n    unit: \"oz\",\n    type: \"number\",\n    min: 0.5,\n    max: 4,\n    default: 1\n  }, {\n    id: \"current\",\n    label: \"Current\",\n    unit: \"A\",\n    type: \"number\",\n    min: 0.1,\n    max: 100,\n    default: 5\n  }],\n  calculate: inputs => {\n    const L_m = inputs.length / 1000;\n    const w_mm = inputs.width;\n    const t_mm = inputs.copperOz * 0.0347;\n    const A_m2 = w_mm * t_mm * 1e-6;\n    const rho = 1.7e-8; // Ω·m\n    const R = rho * L_m / A_m2;\n    const V = inputs.current * R;\n    const P = inputs.current * inputs.current * R;\n    return {\n      planeR: Number((R * 1000).toFixed(3)),\n      // mΩ\n      vDrop: Number((V * 1000).toFixed(2)),\n      // mV\n      planePower: Number((P * 1000).toFixed(2)) // mW\n    };\n  }\n}, {\n  id: \"baud-error\",\n  name: \"UART Baud Rate Error\",\n  description: \"Compute actual baud, error, and best divisor\",\n  category: \"transmission\",\n  inputs: [{\n    id: \"fclk\",\n    label: \"MCU Clock\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 1,\n    max: 400,\n    default: 16\n  }, {\n    id: \"baud\",\n    label: \"Desired Baud\",\n    unit: \"\",\n    type: \"number\",\n    min: 110,\n    max: 921600,\n    default: 115200\n  }, {\n    id: \"oversample\",\n    label: \"Oversampling\",\n    unit: \"x\",\n    type: \"number\",\n    min: 4,\n    max: 32,\n    default: 16\n  }, {\n    id: \"divisor\",\n    label: \"Divisor (N)\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 65535,\n    default: 8\n  }],\n  calculate: inputs => {\n    const f = inputs.fclk * 1e6;\n    const os = inputs.oversample || 16;\n    const baud = inputs.baud;\n    const N = Math.max(1, Math.round(inputs.divisor));\n    const actual = f / (os * N);\n    const err = (actual - baud) / baud * 100;\n    const Nbest = Math.max(1, Math.round(f / (os * baud)));\n    const bestBaud = f / (os * Nbest);\n    const bestErr = (bestBaud - baud) / baud * 100;\n    return {\n      actualBaud: Number(actual.toFixed(1)),\n      errorPercent: Number(err.toFixed(3)),\n      suggestedDivisor: Nbest,\n      suggestedBaud: Number(bestBaud.toFixed(1)),\n      suggestedError: Number(bestErr.toFixed(3))\n    };\n  }\n}, {\n  id: \"pwm-calculator\",\n  name: \"Timer & PWM Frequency\",\n  description: \"Compute achievable PWM frequency and resolution\",\n  category: \"general\",\n  inputs: [{\n    id: \"fclk\",\n    label: \"Timer Clock\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 0.5,\n    max: 400,\n    default: 16\n  }, {\n    id: \"prescaler\",\n    label: \"Prescaler\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 65536,\n    default: 64\n  }, {\n    id: \"bits\",\n    label: \"Resolution (bits)\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 16,\n    default: 8\n  }],\n  calculate: inputs => {\n    const f = inputs.fclk * 1e6;\n    const pres = Math.max(1, Math.round(inputs.prescaler));\n    const levels = Math.pow(2, Math.max(1, Math.round(inputs.bits))) - 1;\n    const freq = f / (pres * (levels + 1));\n    const step = 100 / (levels + 1);\n    return {\n      pwmFrequency: Number(freq.toFixed(1)),\n      resolutionBits: Math.round(inputs.bits),\n      dutyStep: Number(step.toFixed(4))\n    };\n  }\n}, {\n  id: \"battery-life\",\n  name: \"Battery Life Estimator\",\n  description: \"Estimate runtime from active/sleep currents and duty cycle\",\n  category: \"power\",\n  inputs: [{\n    id: \"active\",\n    label: \"Active Current\",\n    unit: \"mA\",\n    type: \"number\",\n    min: 0.01,\n    max: 5000,\n    default: 50\n  }, {\n    id: \"sleep\",\n    label: \"Sleep Current\",\n    unit: \"mA\",\n    type: \"number\",\n    min: 0,\n    max: 100,\n    default: 0.1\n  }, {\n    id: \"duty\",\n    label: \"Active Duty Cycle\",\n    unit: \"%\",\n    type: \"number\",\n    min: 0,\n    max: 100,\n    default: 10\n  }, {\n    id: \"capacity\",\n    label: \"Battery Capacity\",\n    unit: \"mAh\",\n    type: \"number\",\n    min: 1,\n    max: 50000,\n    default: 2000\n  }, {\n    id: \"temp\",\n    label: \"Temperature\",\n    unit: \"°C\",\n    type: \"number\",\n    min: -20,\n    max: 60,\n    default: 25\n  }],\n  calculate: inputs => {\n    const duty = Math.min(100, Math.max(0, inputs.duty)) / 100;\n    const Iavg = inputs.active * duty + inputs.sleep * (1 - duty);\n    // Simple temperature derating\n    let capAdj = inputs.capacity;\n    if (inputs.temp < 0) capAdj *= 0.8;else if (inputs.temp > 40) capAdj *= 0.9;\n    const hours = capAdj / Iavg;\n    return {\n      avgCurrent: Number(Iavg.toFixed(3)),\n      capacityAdjusted: Number(capAdj.toFixed(0)),\n      runtimeHours: Number(hours.toFixed(1)),\n      runtimeDays: Number((hours / 24).toFixed(2))\n    };\n  }\n}, {\n  id: \"rc-filter\",\n  name: \"RC Low-Pass Filter Helper\",\n  description: \"Compute R/C for a desired cutoff and sampling rate\",\n  category: \"transmission\",\n  inputs: [{\n    id: \"fc\",\n    label: \"Cutoff Frequency\",\n    unit: \"kHz\",\n    type: \"number\",\n    min: 0.1,\n    max: 10000,\n    default: 2\n  }, {\n    id: \"fs\",\n    label: \"ADC Sampling Rate\",\n    unit: \"kHz\",\n    type: \"number\",\n    min: 1,\n    max: 50000,\n    default: 10\n  }, {\n    id: \"Rk\",\n    label: \"Chosen R\",\n    unit: \"kΩ\",\n    type: \"number\",\n    min: 0.1,\n    max: 1000,\n    default: 10\n  }],\n  calculate: inputs => {\n    const fc = inputs.fc * 1e3; // Hz\n    const R = inputs.Rk * 1e3; // Ω\n    const C = 1 / (2 * Math.PI * R * fc); // F\n    const tau = R * C; // s\n    const recFc = inputs.fs * 1e3 / 5; // Hz\n    return {\n      cValue: Number((C * 1e9).toFixed(2)),\n      // nF\n      tau: Number((tau * 1e3).toFixed(3)),\n      // ms\n      recommendedFc: Number((recFc / 1e3).toFixed(2)) // kHz\n    };\n  }\n}, {\n  id: \"rf-length\",\n  name: \"RF Line Length Matcher\",\n  description: \"Quarter/half-wave and phase length for given εr\",\n  category: \"transmission\",\n  inputs: [{\n    id: \"freq\",\n    label: \"Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 1,\n    max: 100000,\n    default: 2400\n  }, {\n    id: \"erEff\",\n    label: \"Effective εr\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 10,\n    default: 2.9\n  }, {\n    id: \"phase\",\n    label: \"Phase Shift\",\n    unit: \"°\",\n    type: \"number\",\n    min: 0,\n    max: 360,\n    default: 90\n  }],\n  calculate: inputs => {\n    const c = 299792458;\n    const f = inputs.freq * 1e6;\n    const vp = c / Math.sqrt(inputs.erEff);\n    const lambda = vp / f; // m\n    return {\n      quarterWave: Number((lambda * 1000 / 4).toFixed(2)),\n      halfWave: Number((lambda * 1000 / 2).toFixed(2)),\n      phaseLength: Number((lambda * 1000 * (inputs.phase / 360)).toFixed(2))\n    };\n  }\n}, {\n  id: \"antenna-tuning\",\n  name: \"Antenna Tuning Aid\",\n  description: \"Estimate length trim to shift resonance\",\n  category: \"antenna\",\n  inputs: [{\n    id: \"fMeas\",\n    label: \"Measured Resonance\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 100,\n    max: 6000,\n    default: 2450\n  }, {\n    id: \"fTarget\",\n    label: \"Target Resonance\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 100,\n    max: 6000,\n    default: 2400\n  }, {\n    id: \"length\",\n    label: \"Current Length\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 1,\n    max: 1000,\n    default: 31\n  }],\n  calculate: inputs => {\n    // Length ∝ 1/f approx.\n    const newLen = inputs.length * (inputs.fMeas / inputs.fTarget);\n    const delta = newLen - inputs.length;\n    return {\n      newLength: Number(newLen.toFixed(2)),\n      deltaLength: Number(delta.toFixed(2))\n    };\n  }\n}, {\n  id: \"impedance-calculator\",\n  name: \"Microstrip Impedance Calculator\",\n  description: \"Calculate characteristic impedance of microstrip transmission lines\",\n  category: \"impedance\",\n  inputs: [{\n    id: \"width\",\n    label: \"Trace Width\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 10,\n    default: 0.2\n  }, {\n    id: \"thickness\",\n    label: \"Substrate Thickness\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 5,\n    default: 1.6\n  }, {\n    id: \"dielectric\",\n    label: \"Dielectric Constant (εr)\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 20,\n    default: 4.4\n  }, {\n    id: \"copperThickness\",\n    label: \"Copper Thickness\",\n    unit: \"μm\",\n    type: \"number\",\n    min: 17,\n    max: 105,\n    default: 35\n  }],\n  calculate: inputs => {\n    const {\n      width,\n      thickness,\n      dielectric,\n      copperThickness\n    } = inputs;\n    const w = width;\n    const h = thickness;\n    const er = dielectric;\n    const t = copperThickness / 1000; // convert to mm\n\n    // Effective width accounting for copper thickness\n    const weff = w + t / Math.PI * Math.log(2 * h / t);\n    let z0;\n    if (weff / h <= 1) {\n      // Narrow trace\n      z0 = 60 / Math.sqrt(er) * Math.log(8 * h / weff + weff / (4 * h));\n    } else {\n      // Wide trace\n      z0 = 120 * Math.PI / (Math.sqrt(er) * (weff / h + 1.393 + 0.667 * Math.log(weff / h + 1.444)));\n    }\n\n    // Effective dielectric constant\n    const erEff = (er + 1) / 2 + (er - 1) / 2 * Math.pow(1 + 12 * h / weff, -0.5);\n\n    // Phase velocity\n    const c = 299792458; // m/s\n    const vp = c / Math.sqrt(erEff);\n    return {\n      impedance: Number(z0.toFixed(2)),\n      effectiveDielectric: Number(erEff.toFixed(3)),\n      phaseVelocity: Number((vp / 1e6).toFixed(1)),\n      // Mm/s\n      wavelength: Number((vp / 1e9).toFixed(3)) // m at 1 GHz\n    };\n  }\n}, {\n  id: \"via-calculator\",\n  name: \"Via Impedance Calculator\",\n  description: \"Calculate the impedance and current carrying capacity of vias\",\n  category: \"impedance\",\n  inputs: [{\n    id: \"diameter\",\n    label: \"Via Diameter\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 2,\n    default: 0.2\n  }, {\n    id: \"height\",\n    label: \"Via Height\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 5,\n    default: 1.6\n  }, {\n    id: \"padDiameter\",\n    label: \"Pad Diameter\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.2,\n    max: 3,\n    default: 0.4\n  }, {\n    id: \"current\",\n    label: \"Current\",\n    unit: \"A\",\n    type: \"number\",\n    min: 0.1,\n    max: 10,\n    default: 1\n  }],\n  calculate: inputs => {\n    const diameter = inputs.diameter;\n    const height = inputs.height;\n    const current = inputs.current;\n    const d = diameter;\n    const h = height;\n\n    // Via impedance approximation\n    const impedance = 60 * Math.log(4 * h / d);\n\n    // Current capacity (conservative estimate)\n    const area = Math.PI * Math.pow(d / 2, 2); // mm²\n    const currentCapacity = area * 2; // A/mm² rule of thumb\n\n    // Thermal resistance\n    const thermalResistance = h / (237 * area); // K/W (copper thermal conductivity ≈ 237 W/m⋅K)\n\n    // Temperature rise\n    const resistance = 1.7e-8 * h / (area * 1e-6); // ohms\n    const powerLoss = current * current * resistance;\n    const tempRise = powerLoss * thermalResistance;\n    return {\n      impedance: Number(impedance.toFixed(2)),\n      currentCapacity: Number(currentCapacity.toFixed(2)),\n      resistance: Number((resistance * 1e6).toFixed(2)),\n      // μΩ\n      temperatureRise: Number(tempRise.toFixed(1)),\n      safetyMargin: Number(((currentCapacity / current - 1) * 100).toFixed(1))\n    };\n  }\n},\n// Removed niche antenna dipole calculator to focus on PCB/mechanical value\n{\n  id: \"lc-calculator\",\n  name: \"LC Resonant Circuit Calculator\",\n  description: \"Calculate resonant frequency and component values for LC circuits\",\n  category: \"general\",\n  inputs: [{\n    id: \"inductance\",\n    label: \"Inductance\",\n    unit: \"μH\",\n    type: \"number\",\n    min: 0.001,\n    max: 1000,\n    default: 10\n  }, {\n    id: \"capacitance\",\n    label: \"Capacitance\",\n    unit: \"pF\",\n    type: \"number\",\n    min: 0.1,\n    max: 100000,\n    default: 100\n  }, {\n    id: \"resistance\",\n    label: \"Series Resistance\",\n    unit: \"Ω\",\n    type: \"number\",\n    min: 0.1,\n    max: 1000,\n    default: 10\n  }, {\n    id: \"targetFreq\",\n    label: \"Target Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 0.1,\n    max: 10000,\n    default: 100\n  }],\n  calculate: inputs => {\n    const {\n      inductance,\n      capacitance,\n      resistance,\n      targetFreq\n    } = inputs;\n    const L = inductance * 1e-6; // H\n    const C = capacitance * 1e-12; // F\n    const R = resistance; // Ω\n    const fTarget = targetFreq * 1e6; // Hz\n\n    // Resonant frequency\n    const f0 = 1 / (2 * Math.PI * Math.sqrt(L * C)); // Hz\n\n    // Q factor\n    const omega0 = 2 * Math.PI * f0;\n    const Q = omega0 * L / R;\n\n    // Bandwidth\n    const bandwidth = f0 / Q; // Hz\n\n    // Required L for target frequency (keeping C constant)\n    const LForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * C); // H\n\n    // Required C for target frequency (keeping L constant)\n    const CForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * L); // F\n\n    // Characteristic impedance\n    const Z0 = Math.sqrt(L / C); // Ω\n\n    return {\n      resonantFreq: Number((f0 / 1e6).toFixed(3)),\n      // MHz\n      qFactor: Number(Q.toFixed(1)),\n      bandwidth: Number((bandwidth / 1e3).toFixed(1)),\n      // kHz\n      requiredL: Number((LForTarget * 1e6).toFixed(3)),\n      // μH\n      requiredC: Number((CForTarget * 1e12).toFixed(1)),\n      // pF\n      impedance: Number(Z0.toFixed(1)) // Ω\n    };\n  }\n}, {\n  id: \"heatsink-size\",\n  name: \"Heatsink Size Estimator\",\n  description: \"Estimate required thermal resistance (°C/W) and fin area\",\n  category: \"mechanical\",\n  inputs: [{\n    id: \"power\",\n    label: \"Power Dissipation\",\n    unit: \"W\",\n    type: \"number\",\n    min: 0.1,\n    max: 500,\n    default: 10\n  }, {\n    id: \"tAmbient\",\n    label: \"Ambient Temp\",\n    unit: \"°C\",\n    type: \"number\",\n    min: -20,\n    max: 60,\n    default: 25\n  }, {\n    id: \"tJunction\",\n    label: \"Max Junction Temp\",\n    unit: \"°C\",\n    type: \"number\",\n    min: 40,\n    max: 150,\n    default: 100\n  }, {\n    id: \"thetaJC\",\n    label: \"θJC\",\n    unit: \"°C/W\",\n    type: \"number\",\n    min: 0.1,\n    max: 10,\n    default: 1.5\n  }, {\n    id: \"thetaCS\",\n    label: \"θCS\",\n    unit: \"°C/W\",\n    type: \"number\",\n    min: 0.05,\n    max: 2,\n    default: 0.2\n  }],\n  calculate: inputs => {\n    const ΔT = inputs.tJunction - inputs.tAmbient;\n    const θ_total = ΔT / inputs.power;\n    const θSA = Math.max(0.1, θ_total - (inputs.thetaJC + inputs.thetaCS));\n    // Rough natural convection surface area estimate: θSA ≈ 50/A_dm2 (°C/W)\n    const A_dm2 = 50 / θSA; // dm^2\n    const A_cm2 = A_dm2 * 100; // cm^2\n    return {\n      thetaSA: Number(θSA.toFixed(2)),\n      estArea: Number(A_cm2.toFixed(0))\n    };\n  }\n}, {\n  id: \"bolt-preload\",\n  name: \"Bolt Preload & Torque\",\n  description: \"Estimate torque for target preload using K-factor\",\n  category: \"mechanical\",\n  inputs: [{\n    id: \"preload\",\n    label: \"Target Preload\",\n    unit: \"kN\",\n    type: \"number\",\n    min: 0.1,\n    max: 200,\n    default: 10\n  }, {\n    id: \"diameter\",\n    label: \"Bolt Diameter\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 2,\n    max: 36,\n    default: 8\n  }, {\n    id: \"kFactor\",\n    label: \"K-Factor\",\n    unit: \"\",\n    type: \"number\",\n    min: 0.1,\n    max: 0.4,\n    default: 0.2\n  }],\n  calculate: inputs => {\n    const F = inputs.preload * 1000; // N\n    const d_m = inputs.diameter / 1000; // m\n    const T = inputs.kFactor * F * d_m; // N·m\n    return {\n      torqueNm: Number(T.toFixed(2))\n    };\n  }\n}, {\n  id: \"beam-deflection\",\n  name: \"Cantilever Beam Deflection\",\n  description: \"Tip deflection under end load\",\n  category: \"mechanical\",\n  inputs: [{\n    id: \"load\",\n    label: \"End Load\",\n    unit: \"N\",\n    type: \"number\",\n    min: 1,\n    max: 50000,\n    default: 100\n  }, {\n    id: \"length\",\n    label: \"Length\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 10,\n    max: 2000,\n    default: 200\n  }, {\n    id: \"width\",\n    label: \"Width\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 1,\n    max: 200,\n    default: 20\n  }, {\n    id: \"thickness\",\n    label: \"Thickness\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 1,\n    max: 200,\n    default: 5\n  }, {\n    id: \"E\",\n    label: \"Young's Modulus\",\n    unit: \"GPa\",\n    type: \"number\",\n    min: 1,\n    max: 300,\n    default: 200\n  }],\n  calculate: inputs => {\n    const F = inputs.load; // N\n    const L = inputs.length / 1000; // m\n    const b = inputs.width / 1000; // m\n    const h = inputs.thickness / 1000; // m\n    const E = inputs.E * 1e9; // Pa\n    const I = b * Math.pow(h, 3) / 12; // m^4\n    const delta = F * Math.pow(L, 3) / (3 * E * I); // m\n    return {\n      deflection: Number((delta * 1000).toFixed(3)) // mm\n    };\n  }\n}];","map":{"version":3,"names":["engineeringTools","id","name","description","category","inputs","label","unit","type","min","max","default","calculate","current","tempRise","copperThickness","traceLength","area","Math","pow","thickness","width","resistivity","resistance","voltageDrop","powerLoss","traceWidth","Number","toFixed","traceArea","height","dielectric","spacing","targetZdiff","w","h","er","t","weff","PI","log","E","tanh","sqrt","u","z0","s","k","exp","zdiff","bestS","bestErr","abs","sTest","st","kd","zdt","err","z0Single","zDiff","recSpacing","d_mm","holeDiameter","t_mm","plating","h_mm","n","floor","count","I","area_mm2","area_m2","L_m","rho","R_via","I_per","k_cu","Rth","P_per","dT","rPerVia","currentPerVia","temperatureRise","safetyMargin","fMaxHz","fMax","Zt","zTarget","C_total","C_uF","n100n","ceil","n1u","n10u","totalCap","fHz","fRing","Cpar","cPar","L","Csnub","Rs","lStray","cSnub","rSnub","length","w_mm","copperOz","A_m2","R","V","P","planeR","vDrop","planePower","f","fclk","os","oversample","baud","N","round","divisor","actual","Nbest","bestBaud","actualBaud","errorPercent","suggestedDivisor","suggestedBaud","suggestedError","pres","prescaler","levels","bits","freq","step","pwmFrequency","resolutionBits","dutyStep","duty","Iavg","active","sleep","capAdj","capacity","temp","hours","avgCurrent","capacityAdjusted","runtimeHours","runtimeDays","fc","Rk","C","tau","recFc","fs","cValue","recommendedFc","c","vp","erEff","lambda","quarterWave","halfWave","phaseLength","phase","newLen","fMeas","fTarget","delta","newLength","deltaLength","impedance","effectiveDielectric","phaseVelocity","wavelength","diameter","d","currentCapacity","thermalResistance","inductance","capacitance","targetFreq","f0","omega0","Q","bandwidth","LForTarget","CForTarget","Z0","resonantFreq","qFactor","requiredL","requiredC","ΔT","tJunction","tAmbient","θ_total","power","θSA","thetaJC","thetaCS","A_dm2","A_cm2","thetaSA","estArea","F","preload","d_m","T","kFactor","torqueNm","load","b","deflection"],"sources":["C:/Github/cvanbibber.github.io/src/data/tools.ts"],"sourcesContent":["import { Tool } from '../types';\r\n\r\nexport const engineeringTools: Tool[] = [\r\n  {\r\n    id: \"trace-width-calculator\",\r\n    name: \"PCB Trace Width Calculator\",\r\n    description: \"Calculate the required trace width for a given current and temperature rise\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 100, default: 1 },\r\n      { id: \"tempRise\", label: \"Temperature Rise\", unit: \"°C\", type: \"number\", min: 1, max: 100, default: 10 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"oz\", type: \"number\", min: 0.5, max: 4, default: 1 },\r\n      { id: \"traceLength\", label: \"Trace Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 50 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { current, tempRise, copperThickness, traceLength } = inputs;\r\n      \r\n      // IPC-2221 formula for external traces\r\n      const area = Math.pow(current / (0.048 * Math.pow(tempRise, 0.44)), 1/0.725);\r\n      \r\n      // Convert area to width (thickness = copper thickness * 0.0347mm/oz)\r\n      const thickness = copperThickness * 0.0347; // mm\r\n      const width = area / thickness;\r\n      \r\n      // Calculate resistance and voltage drop\r\n      const resistivity = 1.7e-8; // ohm⋅m for copper\r\n      const resistance = (resistivity * traceLength * 1e-3) / (area * 1e-6); // ohms\r\n      const voltageDrop = current * resistance;\r\n      const powerLoss = current * current * resistance;\r\n      \r\n      return {\r\n        traceWidth: Number(width.toFixed(3)),\r\n        traceArea: Number(area.toFixed(3)),\r\n        resistance: Number((resistance * 1000).toFixed(3)), // mΩ\r\n        voltageDrop: Number((voltageDrop * 1000).toFixed(3)), // mV\r\n        powerLoss: Number((powerLoss * 1000).toFixed(3)) // mW\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"diff-impedance-calculator\",\r\n    name: \"Differential Pair Impedance (Microstrip)\",\r\n    description: \"Estimate single-ended and differential impedance with spacing suggestion\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"width\", label: \"Trace Width\", unit: \"mm\", type: \"number\", min: 0.05, max: 10, default: 0.2 },\r\n      { id: \"height\", label: \"Substrate Thickness (h)\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"dielectric\", label: \"Dielectric Constant (εr)\", unit: \"\", type: \"number\", min: 1, max: 20, default: 4.2 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"µm\", type: \"number\", min: 10, max: 105, default: 35 },\r\n      { id: \"spacing\", label: \"Pair Spacing (s)\", unit: \"mm\", type: \"number\", min: 0.05, max: 10, default: 0.2 },\r\n      { id: \"targetZdiff\", label: \"Target Zdiff\", unit: \"Ω\", type: \"number\", min: 50, max: 150, default: 100 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { width, height, dielectric, copperThickness, spacing, targetZdiff } = inputs;\r\n      const w = width;\r\n      const h = height;\r\n      const er = dielectric;\r\n      const t = (copperThickness || 35) / 1000; // mm\r\n\r\n      // Effective width (Hammerstad/Jensen approx.)\r\n      const weff = w + (t / Math.PI) * Math.log(1 + 4 * Math.E / (t / h * (1/Math.tanh(Math.sqrt(6.517 * w / t)))));\r\n      const u = weff / h;\r\n      const z0 = u <= 1\r\n        ? (60 / Math.sqrt(er)) * Math.log(8 / u + u / 4)\r\n        : (120 * Math.PI) / (Math.sqrt(er) * (u + 1.393 + 0.667 * Math.log(u + 1.444)));\r\n\r\n      // Differential impedance approximation for coupled microstrip\r\n      const s = spacing / h;\r\n      const k = 0.48 * Math.exp(-0.96 * s);\r\n      const zdiff = 2 * z0 * (1 - k);\r\n\r\n      // Find recommended spacing for target Zdiff by simple search\r\n      let bestS = spacing;\r\n      let bestErr = Math.abs(zdiff - targetZdiff);\r\n      for (let sTest = 0.05; sTest <= 5 * h; sTest += Math.max(0.01, 0.02 * h)) {\r\n        const st = (sTest / h);\r\n        const kd = 0.48 * Math.exp(-0.96 * st);\r\n        const zdt = 2 * z0 * (1 - kd);\r\n        const err = Math.abs(zdt - targetZdiff);\r\n        if (err < bestErr) { bestErr = err; bestS = sTest; }\r\n      }\r\n\r\n      return {\r\n        z0Single: Number(z0.toFixed(2)),\r\n        zDiff: Number(zdiff.toFixed(2)),\r\n        recSpacing: Number(bestS.toFixed(3))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"via-current-thermal\",\r\n    name: \"Via Current & Thermal Estimator\",\r\n    description: \"Estimate via resistance, current per via, and temperature rise\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"holeDiameter\", label: \"Hole Diameter\", unit: \"mm\", type: \"number\", min: 0.15, max: 1.0, default: 0.3 },\r\n      { id: \"plating\", label: \"Plating Thickness\", unit: \"µm\", type: \"number\", min: 15, max: 35, default: 25 },\r\n      { id: \"height\", label: \"Board Thickness\", unit: \"mm\", type: \"number\", min: 0.6, max: 2.4, default: 1.6 },\r\n      { id: \"count\", label: \"Vias in Parallel\", unit: \"\", type: \"number\", min: 1, max: 100, default: 1 },\r\n      { id: \"current\", label: \"Total Current\", unit: \"A\", type: \"number\", min: 0.1, max: 30, default: 2 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const d_mm = inputs.holeDiameter;\r\n      const t_mm = (inputs.plating || 25) / 1000; // mm\r\n      const h_mm = inputs.height;\r\n      const n = Math.max(1, Math.floor(inputs.count));\r\n      const I = inputs.current;\r\n\r\n      // Cross-sectional ring area (thin-wall approximation): A ≈ π * d * t\r\n      const area_mm2 = Math.PI * d_mm * t_mm; // mm^2\r\n      const area_m2 = area_mm2 * 1e-6; // m^2\r\n      const L_m = h_mm / 1000; // m\r\n      const rho = 1.7e-8; // Ω·m (copper)\r\n\r\n      const R_via = (rho * L_m) / area_m2; // Ω per via\r\n      const I_per = I / n; // A\r\n\r\n      // Rough thermal resistance K/W (very approximate)\r\n      const k_cu = 237; // W/m·K\r\n      const Rth = L_m / (k_cu * area_m2); // K/W\r\n      const P_per = I_per * I_per * R_via; // W\r\n      const dT = P_per * Rth; // °C\r\n\r\n      return {\r\n        rPerVia: Number((R_via * 1000).toFixed(3)), // mΩ\r\n        currentPerVia: Number(I_per.toFixed(2)),\r\n        temperatureRise: Number(dT.toFixed(1)),\r\n        safetyMargin: Number((Math.max(0, (40 - dT)) / 40 * 100).toFixed(0)) // vs. 40°C headroom\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"decap-optimizer\",\r\n    name: \"Decoupling Capacitor Optimizer\",\r\n    description: \"Suggest cap mix to meet target impedance over frequency\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"fMin\", label: \"Min Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 1000, default: 1 },\r\n      { id: \"fMax\", label: \"Max Frequency\", unit: \"MHz\", type: \"number\", min: 1, max: 5000, default: 100 },\r\n      { id: \"zTarget\", label: \"Target Impedance\", unit: \"mΩ\", type: \"number\", min: 1, max: 500, default: 50 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const fMaxHz = inputs.fMax * 1e6;\r\n      const Zt = inputs.zTarget / 1000; // Ω\r\n      // C_total required at fMax: Z = 1/(2π f C)\r\n      const C_total = 1 / (2 * Math.PI * fMaxHz * Zt); // F\r\n      const C_uF = C_total * 1e6;\r\n      // Split: 60% small (0.1uF), 30% mid (1uF), 10% bulk (10uF)\r\n      const n100n = Math.ceil((0.6 * C_uF) / 0.1);\r\n      const n1u = Math.ceil((0.3 * C_uF) / 1);\r\n      const n10u = Math.max(1, Math.ceil((0.1 * C_uF) / 10));\r\n      return {\r\n        totalCap: Number(C_uF.toFixed(2)),\r\n        n100n: n100n,\r\n        n1u: n1u,\r\n        n10u: n10u\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"snubber-calculator\",\r\n    name: \"Switching Regulator Snubber\",\r\n    description: \"Suggest RC snubber from ringing frequency and parasitic C\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"fRing\", label: \"Ringing Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 100, default: 10 },\r\n      { id: \"cPar\", label: \"Parasitic Capacitance\", unit: \"nF\", type: \"number\", min: 0.5, max: 100, default: 10 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const fHz = inputs.fRing * 1e6;\r\n      const Cpar = inputs.cPar * 1e-9;\r\n      const L = 1 / ((2 * Math.PI * fHz) ** 2 * Cpar); // H\r\n      const Csnub = 2 * Cpar; // F (rule of thumb)\r\n      const Rs = 1 / (2 * Math.PI * fHz * Csnub); // Ω\r\n      return {\r\n        lStray: Number((L * 1e6).toFixed(3)), // µH\r\n        cSnub: Number((Csnub * 1e9).toFixed(2)), // nF\r\n        rSnub: Number(Rs.toFixed(1)) // Ω\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"plane-drop\",\r\n    name: \"PCB Power Plane Voltage Drop\",\r\n    description: \"Estimate plane resistance, voltage drop, and power loss\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"length\", label: \"Current Path Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 100 },\r\n      { id: \"width\", label: \"Effective Width\", unit: \"mm\", type: \"number\", min: 0.5, max: 100, default: 20 },\r\n      { id: \"copperOz\", label: \"Copper Weight\", unit: \"oz\", type: \"number\", min: 0.5, max: 4, default: 1 },\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 100, default: 5 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const L_m = inputs.length / 1000;\r\n      const w_mm = inputs.width;\r\n      const t_mm = inputs.copperOz * 0.0347;\r\n      const A_m2 = (w_mm * t_mm) * 1e-6;\r\n      const rho = 1.7e-8; // Ω·m\r\n      const R = rho * L_m / A_m2;\r\n      const V = inputs.current * R;\r\n      const P = inputs.current * inputs.current * R;\r\n      return {\r\n        planeR: Number((R * 1000).toFixed(3)), // mΩ\r\n        vDrop: Number((V * 1000).toFixed(2)), // mV\r\n        planePower: Number((P * 1000).toFixed(2)) // mW\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"baud-error\",\r\n    name: \"UART Baud Rate Error\",\r\n    description: \"Compute actual baud, error, and best divisor\",\r\n    category: \"transmission\",\r\n    inputs: [\r\n      { id: \"fclk\", label: \"MCU Clock\", unit: \"MHz\", type: \"number\", min: 1, max: 400, default: 16 },\r\n      { id: \"baud\", label: \"Desired Baud\", unit: \"\", type: \"number\", min: 110, max: 921600, default: 115200 },\r\n      { id: \"oversample\", label: \"Oversampling\", unit: \"x\", type: \"number\", min: 4, max: 32, default: 16 },\r\n      { id: \"divisor\", label: \"Divisor (N)\", unit: \"\", type: \"number\", min: 1, max: 65535, default: 8 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const f = inputs.fclk * 1e6;\r\n      const os = inputs.oversample || 16;\r\n      const baud = inputs.baud;\r\n      const N = Math.max(1, Math.round(inputs.divisor));\r\n      const actual = f / (os * N);\r\n      const err = (actual - baud) / baud * 100;\r\n      const Nbest = Math.max(1, Math.round(f / (os * baud)));\r\n      const bestBaud = f / (os * Nbest);\r\n      const bestErr = (bestBaud - baud) / baud * 100;\r\n      return {\r\n        actualBaud: Number(actual.toFixed(1)),\r\n        errorPercent: Number(err.toFixed(3)),\r\n        suggestedDivisor: Nbest,\r\n        suggestedBaud: Number(bestBaud.toFixed(1)),\r\n        suggestedError: Number(bestErr.toFixed(3))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"pwm-calculator\",\r\n    name: \"Timer & PWM Frequency\",\r\n    description: \"Compute achievable PWM frequency and resolution\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"fclk\", label: \"Timer Clock\", unit: \"MHz\", type: \"number\", min: 0.5, max: 400, default: 16 },\r\n      { id: \"prescaler\", label: \"Prescaler\", unit: \"\", type: \"number\", min: 1, max: 65536, default: 64 },\r\n      { id: \"bits\", label: \"Resolution (bits)\", unit: \"\", type: \"number\", min: 1, max: 16, default: 8 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const f = inputs.fclk * 1e6;\r\n      const pres = Math.max(1, Math.round(inputs.prescaler));\r\n      const levels = Math.pow(2, Math.max(1, Math.round(inputs.bits))) - 1;\r\n      const freq = f / (pres * (levels + 1));\r\n      const step = 100 / (levels + 1);\r\n      return {\r\n        pwmFrequency: Number(freq.toFixed(1)),\r\n        resolutionBits: Math.round(inputs.bits),\r\n        dutyStep: Number(step.toFixed(4))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"battery-life\",\r\n    name: \"Battery Life Estimator\",\r\n    description: \"Estimate runtime from active/sleep currents and duty cycle\",\r\n    category: \"power\",\r\n    inputs: [\r\n      { id: \"active\", label: \"Active Current\", unit: \"mA\", type: \"number\", min: 0.01, max: 5000, default: 50 },\r\n      { id: \"sleep\", label: \"Sleep Current\", unit: \"mA\", type: \"number\", min: 0, max: 100, default: 0.1 },\r\n      { id: \"duty\", label: \"Active Duty Cycle\", unit: \"%\", type: \"number\", min: 0, max: 100, default: 10 },\r\n      { id: \"capacity\", label: \"Battery Capacity\", unit: \"mAh\", type: \"number\", min: 1, max: 50000, default: 2000 },\r\n      { id: \"temp\", label: \"Temperature\", unit: \"°C\", type: \"number\", min: -20, max: 60, default: 25 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const duty = Math.min(100, Math.max(0, inputs.duty)) / 100;\r\n      const Iavg = inputs.active * duty + inputs.sleep * (1 - duty);\r\n      // Simple temperature derating\r\n      let capAdj = inputs.capacity;\r\n      if (inputs.temp < 0) capAdj *= 0.8; else if (inputs.temp > 40) capAdj *= 0.9;\r\n      const hours = capAdj / Iavg;\r\n      return {\r\n        avgCurrent: Number(Iavg.toFixed(3)),\r\n        capacityAdjusted: Number(capAdj.toFixed(0)),\r\n        runtimeHours: Number(hours.toFixed(1)),\r\n        runtimeDays: Number((hours / 24).toFixed(2))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"rc-filter\",\r\n    name: \"RC Low-Pass Filter Helper\",\r\n    description: \"Compute R/C for a desired cutoff and sampling rate\",\r\n    category: \"transmission\",\r\n    inputs: [\r\n      { id: \"fc\", label: \"Cutoff Frequency\", unit: \"kHz\", type: \"number\", min: 0.1, max: 10000, default: 2 },\r\n      { id: \"fs\", label: \"ADC Sampling Rate\", unit: \"kHz\", type: \"number\", min: 1, max: 50000, default: 10 },\r\n      { id: \"Rk\", label: \"Chosen R\", unit: \"kΩ\", type: \"number\", min: 0.1, max: 1000, default: 10 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const fc = inputs.fc * 1e3; // Hz\r\n      const R = inputs.Rk * 1e3; // Ω\r\n      const C = 1 / (2 * Math.PI * R * fc); // F\r\n      const tau = R * C; // s\r\n      const recFc = (inputs.fs * 1e3) / 5; // Hz\r\n      return {\r\n        cValue: Number((C * 1e9).toFixed(2)), // nF\r\n        tau: Number((tau * 1e3).toFixed(3)), // ms\r\n        recommendedFc: Number((recFc / 1e3).toFixed(2)) // kHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"rf-length\",\r\n    name: \"RF Line Length Matcher\",\r\n    description: \"Quarter/half-wave and phase length for given εr\",\r\n    category: \"transmission\",\r\n    inputs: [\r\n      { id: \"freq\", label: \"Frequency\", unit: \"MHz\", type: \"number\", min: 1, max: 100000, default: 2400 },\r\n      { id: \"erEff\", label: \"Effective εr\", unit: \"\", type: \"number\", min: 1, max: 10, default: 2.9 },\r\n      { id: \"phase\", label: \"Phase Shift\", unit: \"°\", type: \"number\", min: 0, max: 360, default: 90 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const c = 299792458;\r\n      const f = inputs.freq * 1e6;\r\n      const vp = c / Math.sqrt(inputs.erEff);\r\n      const lambda = vp / f; // m\r\n      return {\r\n        quarterWave: Number((lambda * 1000 / 4).toFixed(2)),\r\n        halfWave: Number((lambda * 1000 / 2).toFixed(2)),\r\n        phaseLength: Number(((lambda * 1000) * (inputs.phase / 360)).toFixed(2))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"antenna-tuning\",\r\n    name: \"Antenna Tuning Aid\",\r\n    description: \"Estimate length trim to shift resonance\",\r\n    category: \"antenna\",\r\n    inputs: [\r\n      { id: \"fMeas\", label: \"Measured Resonance\", unit: \"MHz\", type: \"number\", min: 100, max: 6000, default: 2450 },\r\n      { id: \"fTarget\", label: \"Target Resonance\", unit: \"MHz\", type: \"number\", min: 100, max: 6000, default: 2400 },\r\n      { id: \"length\", label: \"Current Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 31 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      // Length ∝ 1/f approx.\r\n      const newLen = inputs.length * (inputs.fMeas / inputs.fTarget);\r\n      const delta = newLen - inputs.length;\r\n      return {\r\n        newLength: Number(newLen.toFixed(2)),\r\n        deltaLength: Number(delta.toFixed(2))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"impedance-calculator\",\r\n    name: \"Microstrip Impedance Calculator\",\r\n    description: \"Calculate characteristic impedance of microstrip transmission lines\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"width\", label: \"Trace Width\", unit: \"mm\", type: \"number\", min: 0.1, max: 10, default: 0.2 },\r\n      { id: \"thickness\", label: \"Substrate Thickness\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"dielectric\", label: \"Dielectric Constant (εr)\", unit: \"\", type: \"number\", min: 1, max: 20, default: 4.4 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"μm\", type: \"number\", min: 17, max: 105, default: 35 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { width, thickness, dielectric, copperThickness } = inputs;\r\n      \r\n      const w = width;\r\n      const h = thickness;\r\n      const er = dielectric;\r\n      const t = copperThickness / 1000; // convert to mm\r\n      \r\n      // Effective width accounting for copper thickness\r\n      const weff = w + (t / Math.PI) * Math.log(2 * h / t);\r\n      \r\n      let z0;\r\n      if (weff / h <= 1) {\r\n        // Narrow trace\r\n        z0 = (60 / Math.sqrt(er)) * Math.log(8 * h / weff + weff / (4 * h));\r\n      } else {\r\n        // Wide trace\r\n        z0 = (120 * Math.PI) / (Math.sqrt(er) * (weff / h + 1.393 + 0.667 * Math.log(weff / h + 1.444)));\r\n      }\r\n      \r\n      // Effective dielectric constant\r\n      const erEff = (er + 1) / 2 + ((er - 1) / 2) * Math.pow(1 + 12 * h / weff, -0.5);\r\n      \r\n      // Phase velocity\r\n      const c = 299792458; // m/s\r\n      const vp = c / Math.sqrt(erEff);\r\n      \r\n      return {\r\n        impedance: Number(z0.toFixed(2)),\r\n        effectiveDielectric: Number(erEff.toFixed(3)),\r\n        phaseVelocity: Number((vp / 1e6).toFixed(1)), // Mm/s\r\n        wavelength: Number((vp / 1e9).toFixed(3)) // m at 1 GHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"via-calculator\",\r\n    name: \"Via Impedance Calculator\",\r\n    description: \"Calculate the impedance and current carrying capacity of vias\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"diameter\", label: \"Via Diameter\", unit: \"mm\", type: \"number\", min: 0.1, max: 2, default: 0.2 },\r\n      { id: \"height\", label: \"Via Height\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"padDiameter\", label: \"Pad Diameter\", unit: \"mm\", type: \"number\", min: 0.2, max: 3, default: 0.4 },\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 10, default: 1 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const diameter = inputs.diameter;\r\n      const height = inputs.height;\r\n      const current = inputs.current;\r\n      \r\n      const d = diameter;\r\n      const h = height;\r\n      \r\n      // Via impedance approximation\r\n      const impedance = 60 * Math.log(4 * h / d);\r\n      \r\n      // Current capacity (conservative estimate)\r\n      const area = Math.PI * Math.pow(d / 2, 2); // mm²\r\n      const currentCapacity = area * 2; // A/mm² rule of thumb\r\n      \r\n      // Thermal resistance\r\n      const thermalResistance = h / (237 * area); // K/W (copper thermal conductivity ≈ 237 W/m⋅K)\r\n      \r\n      // Temperature rise\r\n      const resistance = 1.7e-8 * h / (area * 1e-6); // ohms\r\n      const powerLoss = current * current * resistance;\r\n      const tempRise = powerLoss * thermalResistance;\r\n      \r\n      return {\r\n        impedance: Number(impedance.toFixed(2)),\r\n        currentCapacity: Number(currentCapacity.toFixed(2)),\r\n        resistance: Number((resistance * 1e6).toFixed(2)), // μΩ\r\n        temperatureRise: Number(tempRise.toFixed(1)),\r\n        safetyMargin: Number(((currentCapacity / current - 1) * 100).toFixed(1))\r\n      };\r\n    }\r\n  },\r\n  // Removed niche antenna dipole calculator to focus on PCB/mechanical value\r\n  {\r\n    id: \"lc-calculator\",\r\n    name: \"LC Resonant Circuit Calculator\",\r\n    description: \"Calculate resonant frequency and component values for LC circuits\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"inductance\", label: \"Inductance\", unit: \"μH\", type: \"number\", min: 0.001, max: 1000, default: 10 },\r\n      { id: \"capacitance\", label: \"Capacitance\", unit: \"pF\", type: \"number\", min: 0.1, max: 100000, default: 100 },\r\n      { id: \"resistance\", label: \"Series Resistance\", unit: \"Ω\", type: \"number\", min: 0.1, max: 1000, default: 10 },\r\n      { id: \"targetFreq\", label: \"Target Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 10000, default: 100 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { inductance, capacitance, resistance, targetFreq } = inputs;\r\n      \r\n      const L = inductance * 1e-6; // H\r\n      const C = capacitance * 1e-12; // F\r\n      const R = resistance; // Ω\r\n      const fTarget = targetFreq * 1e6; // Hz\r\n      \r\n      // Resonant frequency\r\n      const f0 = 1 / (2 * Math.PI * Math.sqrt(L * C)); // Hz\r\n      \r\n      // Q factor\r\n      const omega0 = 2 * Math.PI * f0;\r\n      const Q = omega0 * L / R;\r\n      \r\n      // Bandwidth\r\n      const bandwidth = f0 / Q; // Hz\r\n      \r\n      // Required L for target frequency (keeping C constant)\r\n      const LForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * C); // H\r\n      \r\n      // Required C for target frequency (keeping L constant)\r\n      const CForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * L); // F\r\n      \r\n      // Characteristic impedance\r\n      const Z0 = Math.sqrt(L / C); // Ω\r\n      \r\n      return {\r\n        resonantFreq: Number((f0 / 1e6).toFixed(3)), // MHz\r\n        qFactor: Number(Q.toFixed(1)),\r\n        bandwidth: Number((bandwidth / 1e3).toFixed(1)), // kHz\r\n        requiredL: Number((LForTarget * 1e6).toFixed(3)), // μH\r\n        requiredC: Number((CForTarget * 1e12).toFixed(1)), // pF\r\n        impedance: Number(Z0.toFixed(1)) // Ω\r\n      };\r\n    }\r\n  }\r\n  ,\r\n  {\r\n    id: \"heatsink-size\",\r\n    name: \"Heatsink Size Estimator\",\r\n    description: \"Estimate required thermal resistance (°C/W) and fin area\",\r\n    category: \"mechanical\",\r\n    inputs: [\r\n      { id: \"power\", label: \"Power Dissipation\", unit: \"W\", type: \"number\", min: 0.1, max: 500, default: 10 },\r\n      { id: \"tAmbient\", label: \"Ambient Temp\", unit: \"°C\", type: \"number\", min: -20, max: 60, default: 25 },\r\n      { id: \"tJunction\", label: \"Max Junction Temp\", unit: \"°C\", type: \"number\", min: 40, max: 150, default: 100 },\r\n      { id: \"thetaJC\", label: \"θJC\", unit: \"°C/W\", type: \"number\", min: 0.1, max: 10, default: 1.5 },\r\n      { id: \"thetaCS\", label: \"θCS\", unit: \"°C/W\", type: \"number\", min: 0.05, max: 2, default: 0.2 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const ΔT = inputs.tJunction - inputs.tAmbient;\r\n      const θ_total = ΔT / inputs.power;\r\n      const θSA = Math.max(0.1, θ_total - (inputs.thetaJC + inputs.thetaCS));\r\n      // Rough natural convection surface area estimate: θSA ≈ 50/A_dm2 (°C/W)\r\n      const A_dm2 = 50 / θSA; // dm^2\r\n      const A_cm2 = A_dm2 * 100; // cm^2\r\n      return {\r\n        thetaSA: Number(θSA.toFixed(2)),\r\n        estArea: Number(A_cm2.toFixed(0)),\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"bolt-preload\",\r\n    name: \"Bolt Preload & Torque\",\r\n    description: \"Estimate torque for target preload using K-factor\",\r\n    category: \"mechanical\",\r\n    inputs: [\r\n      { id: \"preload\", label: \"Target Preload\", unit: \"kN\", type: \"number\", min: 0.1, max: 200, default: 10 },\r\n      { id: \"diameter\", label: \"Bolt Diameter\", unit: \"mm\", type: \"number\", min: 2, max: 36, default: 8 },\r\n      { id: \"kFactor\", label: \"K-Factor\", unit: \"\", type: \"number\", min: 0.1, max: 0.4, default: 0.2 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const F = inputs.preload * 1000; // N\r\n      const d_m = inputs.diameter / 1000; // m\r\n      const T = inputs.kFactor * F * d_m; // N·m\r\n      return {\r\n        torqueNm: Number(T.toFixed(2)),\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"beam-deflection\",\r\n    name: \"Cantilever Beam Deflection\",\r\n    description: \"Tip deflection under end load\",\r\n    category: \"mechanical\",\r\n    inputs: [\r\n      { id: \"load\", label: \"End Load\", unit: \"N\", type: \"number\", min: 1, max: 50000, default: 100 },\r\n      { id: \"length\", label: \"Length\", unit: \"mm\", type: \"number\", min: 10, max: 2000, default: 200 },\r\n      { id: \"width\", label: \"Width\", unit: \"mm\", type: \"number\", min: 1, max: 200, default: 20 },\r\n      { id: \"thickness\", label: \"Thickness\", unit: \"mm\", type: \"number\", min: 1, max: 200, default: 5 },\r\n      { id: \"E\", label: \"Young's Modulus\", unit: \"GPa\", type: \"number\", min: 1, max: 300, default: 200 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const F = inputs.load; // N\r\n      const L = inputs.length / 1000; // m\r\n      const b = inputs.width / 1000; // m\r\n      const h = inputs.thickness / 1000; // m\r\n      const E = inputs.E * 1e9; // Pa\r\n      const I = (b * Math.pow(h, 3)) / 12; // m^4\r\n      const delta = (F * Math.pow(L, 3)) / (3 * E * I); // m\r\n      return {\r\n        deflection: Number((delta * 1000).toFixed(3)) // mm\r\n      };\r\n    }\r\n  }\r\n];\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}