{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\cvanbibber.github.io\\\\src\\\\components\\\\CircuitField.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useReducedMotion } from 'motion/react';\n\n/**\r\n * CircuitField: Electronics-themed interactive background\r\n * - A softly jittered circuit lattice of nodes and \"wires\"\r\n * - Glowing carriers (electrons) travel along connections\r\n * - Cursor acts as a charged probe (repulsive by default; hold Alt to attract)\r\n * - Pauses when offscreen; respects Reduced Motion\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CircuitField = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const runningRef = useRef(false);\n  const rafRef = useRef(null);\n  const reduceMotion = useReducedMotion();\n  const mouse = useRef({\n    x: 0,\n    y: 0,\n    active: false,\n    attract: false\n  });\n  const dprRef = useRef(1);\n\n  // Internal simulation state\n  const stateRef = useRef(null);\n  const rand = (min, max) => Math.random() * (max - min) + min;\n  const init = canvas => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const rect = canvas.getBoundingClientRect();\n    const dpr = Math.min(window.devicePixelRatio || 1, 2);\n    dprRef.current = dpr;\n    canvas.width = Math.floor(rect.width * dpr);\n    canvas.height = Math.floor(rect.height * dpr);\n    const w = canvas.width;\n    const h = canvas.height;\n\n    // Grid density scaled to screen, capped for perf\n    const targetCols = Math.max(18, Math.min(28, Math.floor(rect.width / 50)));\n    const targetRows = Math.max(10, Math.min(18, Math.floor(rect.height / 50)));\n    const cols = targetCols;\n    const rows = targetRows;\n    const xStep = w / (cols + 1);\n    const yStep = h / (rows + 1);\n    const nodes = [];\n\n    // Create slightly jittered lattice nodes\n    for (let j = 0; j < rows; j++) {\n      for (let i = 0; i < cols; i++) {\n        const x0 = (i + 1) * xStep + rand(-0.08, 0.08) * xStep;\n        const y0 = (j + 1) * yStep + rand(-0.08, 0.08) * yStep;\n        nodes.push({\n          x: x0,\n          y: y0,\n          x0,\n          y0,\n          vx: 0,\n          vy: 0,\n          neighbors: []\n        });\n      }\n    }\n\n    // Helper to index\n    const idx = (i, j) => j * cols + i;\n\n    // Connect to right, down, and diagonals for a circuit-like mesh\n    const edges = [];\n    for (let j = 0; j < rows; j++) {\n      for (let i = 0; i < cols; i++) {\n        const a = idx(i, j);\n        const connect = (ii, jj) => {\n          if (ii >= 0 && ii < cols && jj >= 0 && jj < rows) {\n            const b = idx(ii, jj);\n            nodes[a].neighbors.push(b);\n            // Create an edge only once (a < b)\n            if (a < b) {\n              // 1-2 carriers per edge\n              const carriers = new Array(Math.random() < 0.5 ? 1 : 2).fill(0).map(() => ({\n                t: Math.random(),\n                v: rand(0.0006, 0.0018) // speed\n              }));\n              edges.push({\n                a,\n                b,\n                carriers\n              });\n            }\n          }\n        };\n        connect(i + 1, j);\n        connect(i, j + 1);\n        if ((i + j) % 2 === 0) connect(i + 1, j + 1);else connect(i - 1, j + 1);\n      }\n    }\n    stateRef.current = {\n      nodes,\n      edges,\n      w,\n      h\n    };\n  };\n  const step = dt => {\n    const st = stateRef.current;\n    const canvas = canvasRef.current;\n    if (!st || !canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const {\n      nodes,\n      edges,\n      w,\n      h\n    } = st;\n    const dpr = dprRef.current;\n\n    // Physics params\n    const spring = 0.010; // spring back to home\n    const damping = 0.95; // velocity damping\n    const mouseForce = 14000; // base magnitude\n    const influenceR2 = 180 * dpr * (180 * dpr);\n\n    // Update nodes (mass-spring + mouse field)\n    for (let i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      // spring back\n      const ax = (n.x0 - n.x) * spring;\n      const ay = (n.y0 - n.y) * spring;\n      let fx = ax;\n      let fy = ay;\n      if (mouse.current.active) {\n        const dx = mouse.current.x * dpr - n.x;\n        const dy = mouse.current.y * dpr - n.y;\n        const r2 = dx * dx + dy * dy + 0.001;\n        if (r2 < influenceR2) {\n          const inv = 1 / Math.sqrt(r2);\n          const dirx = dx * inv;\n          const diry = dy * inv;\n          const sign = mouse.current.attract ? 1 : -1; // attract or repel\n          const mag = mouseForce / r2 * sign;\n          fx += dirx * mag;\n          fy += diry * mag;\n        }\n      }\n      n.vx = (n.vx + fx) * damping;\n      n.vy = (n.vy + fy) * damping;\n      n.x += n.vx * dt;\n      n.y += n.vy * dt;\n    }\n\n    // Clear\n    ctx.clearRect(0, 0, w, h);\n\n    // Background subtle grid\n    ctx.save();\n    ctx.globalAlpha = 0.25;\n    ctx.strokeStyle = '#0ea5e9'; // cyan-500\n    ctx.lineWidth = 1 * dpr;\n    const grid = 64 * dpr;\n    for (let x = 0; x < w; x += grid) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, h);\n      ctx.stroke();\n    }\n    for (let y = 0; y < h; y += grid) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(w, y);\n      ctx.stroke();\n    }\n    ctx.restore();\n\n    // Draw edges (wires) with glow\n    ctx.save();\n    ctx.lineWidth = 1.2 * dpr;\n    for (let e = 0; e < edges.length; e++) {\n      const edge = edges[e];\n      const a = nodes[edge.a];\n      const b = nodes[edge.b];\n\n      // base wire\n      ctx.strokeStyle = 'rgba(59,130,246,0.25)'; // blue-500\n      ctx.beginPath();\n      ctx.moveTo(a.x, a.y);\n      ctx.lineTo(b.x, b.y);\n      ctx.stroke();\n\n      // glowing core\n      ctx.strokeStyle = 'rgba(59,130,246,0.65)';\n      ctx.shadowColor = 'rgba(59,130,246,0.6)';\n      ctx.shadowBlur = 6 * dpr;\n      ctx.beginPath();\n      ctx.moveTo(a.x, a.y);\n      ctx.lineTo(b.x, b.y);\n      ctx.stroke();\n\n      // carriers (electrons) traveling along the edge\n      ctx.shadowBlur = 12 * dpr;\n      for (let c = 0; c < edge.carriers.length; c++) {\n        const carrier = edge.carriers[c];\n        carrier.t += carrier.v * dt;\n        if (carrier.t > 1) carrier.t -= 1;\n        const x = a.x + (b.x - a.x) * carrier.t;\n        const y = a.y + (b.y - a.y) * carrier.t;\n        ctx.fillStyle = 'rgba(14,165,233,0.9)'; // cyan-500\n        ctx.beginPath();\n        ctx.arc(x, y, 1.6 * dpr, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    ctx.restore();\n\n    // Draw nodes (junctions)\n    ctx.save();\n    for (let i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      ctx.shadowColor = 'rgba(99,102,241,0.6)'; // indigo glow\n      ctx.shadowBlur = 10 * dpr;\n      ctx.fillStyle = 'rgba(99,102,241,0.9)'; // indigo-500\n      ctx.beginPath();\n      ctx.arc(n.x, n.y, 1.8 * dpr, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    ctx.restore();\n\n    // Cursor field visualization: small orbiting ring\n    if (mouse.current.active) {\n      ctx.save();\n      ctx.globalAlpha = 0.6;\n      ctx.strokeStyle = mouse.current.attract ? 'rgba(34,197,94,0.9)' : 'rgba(239,68,68,0.9)'; // green/red\n      ctx.lineWidth = 2 * dpr;\n      ctx.beginPath();\n      ctx.arc(mouse.current.x * dpr, mouse.current.y * dpr, 18 * dpr, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    if (reduceMotion) {\n      // For reduced motion users, render a static grid once\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      const rect = canvas.getBoundingClientRect();\n      const dpr = Math.min(window.devicePixelRatio || 1, 2);\n      canvas.width = Math.floor(rect.width * dpr);\n      canvas.height = Math.floor(rect.height * dpr);\n      const w = canvas.width;\n      const h = canvas.height;\n      ctx.clearRect(0, 0, w, h);\n      ctx.globalAlpha = 0.25;\n      ctx.strokeStyle = '#0ea5e9';\n      const grid = 64 * dpr;\n      for (let x = 0; x < w; x += grid) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, h);\n        ctx.stroke();\n      }\n      for (let y = 0; y < h; y += grid) {\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(w, y);\n        ctx.stroke();\n      }\n      return;\n    }\n    init(canvas);\n    let last = performance.now();\n    const tick = now => {\n      if (!runningRef.current) return;\n      const dt = Math.min(32, now - last); // clamp delta to avoid jumps\n      last = now;\n      step(dt);\n      rafRef.current = requestAnimationFrame(tick);\n    };\n    const start = () => {\n      if (runningRef.current) return;\n      runningRef.current = true;\n      last = performance.now();\n      rafRef.current = requestAnimationFrame(tick);\n    };\n    const stop = () => {\n      runningRef.current = false;\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\n      rafRef.current = null;\n    };\n\n    // Intersection Observer to pause when offscreen\n    const io = new IntersectionObserver(entries => {\n      for (const e of entries) {\n        if (e.isIntersecting) start();else stop();\n      }\n    }, {\n      root: null,\n      threshold: 0.05\n    });\n    io.observe(canvas);\n\n    // Resize handler\n    const onResize = () => {\n      init(canvas);\n    };\n    window.addEventListener('resize', onResize);\n\n    // Mouse and keyboard for interaction\n    const onMove = e => {\n      mouse.current.x = e.clientX;\n      mouse.current.y = e.clientY;\n      mouse.current.active = true;\n    };\n    const onLeave = () => {\n      mouse.current.active = false;\n    };\n    const onKey = e => {\n      // Hold Alt to attract (green ring), release for repulsion (red)\n      mouse.current.attract = e.altKey;\n    };\n    window.addEventListener('mousemove', onMove);\n    window.addEventListener('mouseleave', onLeave);\n    window.addEventListener('keydown', onKey);\n    window.addEventListener('keyup', onKey);\n    return () => {\n      stop();\n      io.disconnect();\n      window.removeEventListener('resize', onResize);\n      window.removeEventListener('mousemove', onMove);\n      window.removeEventListener('mouseleave', onLeave);\n      window.removeEventListener('keydown', onKey);\n      window.removeEventListener('keyup', onKey);\n    };\n  }, [reduceMotion]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"absolute inset-0 w-full h-full pointer-events-none select-none\",\n    \"aria-hidden\": true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(CircuitField, \"q0gHnZQt1jzVkTyjhXO00DrzED4=\", false, function () {\n  return [useReducedMotion];\n});\n_c = CircuitField;\nexport default CircuitField;\nvar _c;\n$RefreshReg$(_c, \"CircuitField\");","map":{"version":3,"names":["React","useEffect","useRef","useReducedMotion","jsxDEV","_jsxDEV","CircuitField","_s","canvasRef","runningRef","rafRef","reduceMotion","mouse","x","y","active","attract","dprRef","stateRef","rand","min","max","Math","random","init","canvas","ctx","getContext","rect","getBoundingClientRect","dpr","window","devicePixelRatio","current","width","floor","height","w","h","targetCols","targetRows","cols","rows","xStep","yStep","nodes","j","i","x0","y0","push","vx","vy","neighbors","idx","edges","a","connect","ii","jj","b","carriers","Array","fill","map","t","v","step","dt","st","spring","damping","mouseForce","influenceR2","length","n","ax","ay","fx","fy","dx","dy","r2","inv","sqrt","dirx","diry","sign","mag","clearRect","save","globalAlpha","strokeStyle","lineWidth","grid","beginPath","moveTo","lineTo","stroke","restore","e","edge","shadowColor","shadowBlur","c","carrier","fillStyle","arc","PI","last","performance","now","tick","requestAnimationFrame","start","stop","cancelAnimationFrame","io","IntersectionObserver","entries","isIntersecting","root","threshold","observe","onResize","addEventListener","onMove","clientX","clientY","onLeave","onKey","altKey","disconnect","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Github/cvanbibber.github.io/src/components/CircuitField.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useReducedMotion } from 'motion/react';\r\n\r\n/**\r\n * CircuitField: Electronics-themed interactive background\r\n * - A softly jittered circuit lattice of nodes and \"wires\"\r\n * - Glowing carriers (electrons) travel along connections\r\n * - Cursor acts as a charged probe (repulsive by default; hold Alt to attract)\r\n * - Pauses when offscreen; respects Reduced Motion\r\n */\r\nconst CircuitField: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const runningRef = useRef(false);\r\n  const rafRef = useRef<number | null>(null);\r\n  const reduceMotion = useReducedMotion();\r\n\r\n  const mouse = useRef({ x: 0, y: 0, active: false, attract: false });\r\n  const dprRef = useRef<number>(1);\r\n\r\n  // Internal simulation state\r\n  const stateRef = useRef<{\r\n    nodes: Array<{ x: number; y: number; x0: number; y0: number; vx: number; vy: number; neighbors: number[] }>;\r\n    edges: Array<{ a: number; b: number; carriers: Array<{ t: number; v: number }> }>;\r\n    w: number;\r\n    h: number;\r\n  } | null>(null);\r\n\r\n  const rand = (min: number, max: number) => Math.random() * (max - min) + min;\r\n\r\n  const init = (canvas: HTMLCanvasElement) => {\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const dpr = Math.min(window.devicePixelRatio || 1, 2);\r\n    dprRef.current = dpr;\r\n    canvas.width = Math.floor(rect.width * dpr);\r\n    canvas.height = Math.floor(rect.height * dpr);\r\n\r\n    const w = canvas.width;\r\n    const h = canvas.height;\r\n\r\n    // Grid density scaled to screen, capped for perf\r\n    const targetCols = Math.max(18, Math.min(28, Math.floor(rect.width / 50)));\r\n    const targetRows = Math.max(10, Math.min(18, Math.floor(rect.height / 50)));\r\n\r\n    const cols = targetCols;\r\n    const rows = targetRows;\r\n    const xStep = w / (cols + 1);\r\n    const yStep = h / (rows + 1);\r\n\r\n    const nodes: Array<{ x: number; y: number; x0: number; y0: number; vx: number; vy: number; neighbors: number[] }> = [];\r\n\r\n    // Create slightly jittered lattice nodes\r\n    for (let j = 0; j < rows; j++) {\r\n      for (let i = 0; i < cols; i++) {\r\n        const x0 = (i + 1) * xStep + rand(-0.08, 0.08) * xStep;\r\n        const y0 = (j + 1) * yStep + rand(-0.08, 0.08) * yStep;\r\n        nodes.push({ x: x0, y: y0, x0, y0, vx: 0, vy: 0, neighbors: [] });\r\n      }\r\n    }\r\n\r\n    // Helper to index\r\n    const idx = (i: number, j: number) => j * cols + i;\r\n\r\n    // Connect to right, down, and diagonals for a circuit-like mesh\r\n    const edges: Array<{ a: number; b: number; carriers: Array<{ t: number; v: number }> }> = [];\r\n    for (let j = 0; j < rows; j++) {\r\n      for (let i = 0; i < cols; i++) {\r\n        const a = idx(i, j);\r\n        const connect = (ii: number, jj: number) => {\r\n          if (ii >= 0 && ii < cols && jj >= 0 && jj < rows) {\r\n            const b = idx(ii, jj);\r\n            nodes[a].neighbors.push(b);\r\n            // Create an edge only once (a < b)\r\n            if (a < b) {\r\n              // 1-2 carriers per edge\r\n              const carriers = new Array(Math.random() < 0.5 ? 1 : 2).fill(0).map(() => ({\r\n                t: Math.random(),\r\n                v: rand(0.0006, 0.0018), // speed\r\n              }));\r\n              edges.push({ a, b, carriers });\r\n            }\r\n          }\r\n        };\r\n        connect(i + 1, j);\r\n        connect(i, j + 1);\r\n        if ((i + j) % 2 === 0) connect(i + 1, j + 1);\r\n        else connect(i - 1, j + 1);\r\n      }\r\n    }\r\n\r\n    stateRef.current = { nodes, edges, w, h };\r\n  };\r\n\r\n  const step = (dt: number) => {\r\n    const st = stateRef.current;\r\n    const canvas = canvasRef.current;\r\n    if (!st || !canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const { nodes, edges, w, h } = st;\r\n    const dpr = dprRef.current;\r\n\r\n    // Physics params\r\n    const spring = 0.010; // spring back to home\r\n    const damping = 0.95; // velocity damping\r\n    const mouseForce = 14000; // base magnitude\r\n    const influenceR2 = (180 * dpr) * (180 * dpr);\r\n\r\n    // Update nodes (mass-spring + mouse field)\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const n = nodes[i];\r\n      // spring back\r\n      const ax = (n.x0 - n.x) * spring;\r\n      const ay = (n.y0 - n.y) * spring;\r\n\r\n      let fx = ax;\r\n      let fy = ay;\r\n\r\n      if (mouse.current.active) {\r\n        const dx = (mouse.current.x * dpr) - n.x;\r\n        const dy = (mouse.current.y * dpr) - n.y;\r\n        const r2 = dx * dx + dy * dy + 0.001;\r\n        if (r2 < influenceR2) {\r\n          const inv = 1 / Math.sqrt(r2);\r\n          const dirx = dx * inv;\r\n          const diry = dy * inv;\r\n          const sign = mouse.current.attract ? 1 : -1; // attract or repel\r\n          const mag = (mouseForce / r2) * sign;\r\n          fx += dirx * mag;\r\n          fy += diry * mag;\r\n        }\r\n      }\r\n\r\n      n.vx = (n.vx + fx) * damping;\r\n      n.vy = (n.vy + fy) * damping;\r\n      n.x += n.vx * dt;\r\n      n.y += n.vy * dt;\r\n    }\r\n\r\n    // Clear\r\n    ctx.clearRect(0, 0, w, h);\r\n\r\n    // Background subtle grid\r\n    ctx.save();\r\n    ctx.globalAlpha = 0.25;\r\n    ctx.strokeStyle = '#0ea5e9'; // cyan-500\r\n    ctx.lineWidth = 1 * dpr;\r\n    const grid = 64 * dpr;\r\n    for (let x = 0; x < w; x += grid) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, h);\r\n      ctx.stroke();\r\n    }\r\n    for (let y = 0; y < h; y += grid) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(w, y);\r\n      ctx.stroke();\r\n    }\r\n    ctx.restore();\r\n\r\n    // Draw edges (wires) with glow\r\n    ctx.save();\r\n    ctx.lineWidth = 1.2 * dpr;\r\n    for (let e = 0; e < edges.length; e++) {\r\n      const edge = edges[e];\r\n      const a = nodes[edge.a];\r\n      const b = nodes[edge.b];\r\n\r\n      // base wire\r\n      ctx.strokeStyle = 'rgba(59,130,246,0.25)'; // blue-500\r\n      ctx.beginPath();\r\n      ctx.moveTo(a.x, a.y);\r\n      ctx.lineTo(b.x, b.y);\r\n      ctx.stroke();\r\n\r\n      // glowing core\r\n      ctx.strokeStyle = 'rgba(59,130,246,0.65)';\r\n      ctx.shadowColor = 'rgba(59,130,246,0.6)';\r\n      ctx.shadowBlur = 6 * dpr;\r\n      ctx.beginPath();\r\n      ctx.moveTo(a.x, a.y);\r\n      ctx.lineTo(b.x, b.y);\r\n      ctx.stroke();\r\n\r\n      // carriers (electrons) traveling along the edge\r\n      ctx.shadowBlur = 12 * dpr;\r\n      for (let c = 0; c < edge.carriers.length; c++) {\r\n        const carrier = edge.carriers[c];\r\n        carrier.t += carrier.v * dt;\r\n        if (carrier.t > 1) carrier.t -= 1;\r\n        const x = a.x + (b.x - a.x) * carrier.t;\r\n        const y = a.y + (b.y - a.y) * carrier.t;\r\n        ctx.fillStyle = 'rgba(14,165,233,0.9)'; // cyan-500\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 1.6 * dpr, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n    ctx.restore();\r\n\r\n    // Draw nodes (junctions)\r\n    ctx.save();\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const n = nodes[i];\r\n      ctx.shadowColor = 'rgba(99,102,241,0.6)'; // indigo glow\r\n      ctx.shadowBlur = 10 * dpr;\r\n      ctx.fillStyle = 'rgba(99,102,241,0.9)'; // indigo-500\r\n      ctx.beginPath();\r\n      ctx.arc(n.x, n.y, 1.8 * dpr, 0, Math.PI * 2);\r\n      ctx.fill();\r\n    }\r\n    ctx.restore();\r\n\r\n    // Cursor field visualization: small orbiting ring\r\n    if (mouse.current.active) {\r\n      ctx.save();\r\n      ctx.globalAlpha = 0.6;\r\n      ctx.strokeStyle = mouse.current.attract ? 'rgba(34,197,94,0.9)' : 'rgba(239,68,68,0.9)'; // green/red\r\n      ctx.lineWidth = 2 * dpr;\r\n      ctx.beginPath();\r\n      ctx.arc(mouse.current.x * dpr, mouse.current.y * dpr, 18 * dpr, 0, Math.PI * 2);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    if (reduceMotion) {\r\n      // For reduced motion users, render a static grid once\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) return;\r\n      const rect = canvas.getBoundingClientRect();\r\n      const dpr = Math.min(window.devicePixelRatio || 1, 2);\r\n      canvas.width = Math.floor(rect.width * dpr);\r\n      canvas.height = Math.floor(rect.height * dpr);\r\n      const w = canvas.width;\r\n      const h = canvas.height;\r\n      ctx.clearRect(0, 0, w, h);\r\n      ctx.globalAlpha = 0.25;\r\n      ctx.strokeStyle = '#0ea5e9';\r\n      const grid = 64 * dpr;\r\n      for (let x = 0; x < w; x += grid) { ctx.beginPath(); ctx.moveTo(x, 0); ctx.lineTo(x, h); ctx.stroke(); }\r\n      for (let y = 0; y < h; y += grid) { ctx.beginPath(); ctx.moveTo(0, y); ctx.lineTo(w, y); ctx.stroke(); }\r\n      return;\r\n    }\r\n\r\n    init(canvas);\r\n\r\n    let last = performance.now();\r\n    const tick = (now: number) => {\r\n      if (!runningRef.current) return;\r\n      const dt = Math.min(32, now - last); // clamp delta to avoid jumps\r\n      last = now;\r\n      step(dt);\r\n      rafRef.current = requestAnimationFrame(tick);\r\n    };\r\n\r\n    const start = () => {\r\n      if (runningRef.current) return;\r\n      runningRef.current = true;\r\n      last = performance.now();\r\n      rafRef.current = requestAnimationFrame(tick);\r\n    };\r\n    const stop = () => {\r\n      runningRef.current = false;\r\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\r\n      rafRef.current = null;\r\n    };\r\n\r\n    // Intersection Observer to pause when offscreen\r\n    const io = new IntersectionObserver(\r\n      (entries) => {\r\n        for (const e of entries) {\r\n          if (e.isIntersecting) start();\r\n          else stop();\r\n        }\r\n      },\r\n      { root: null, threshold: 0.05 }\r\n    );\r\n    io.observe(canvas);\r\n\r\n    // Resize handler\r\n    const onResize = () => {\r\n      init(canvas);\r\n    };\r\n    window.addEventListener('resize', onResize);\r\n\r\n    // Mouse and keyboard for interaction\r\n    const onMove = (e: MouseEvent) => {\r\n      mouse.current.x = e.clientX;\r\n      mouse.current.y = e.clientY;\r\n      mouse.current.active = true;\r\n    };\r\n    const onLeave = () => { mouse.current.active = false; };\r\n    const onKey = (e: KeyboardEvent) => {\r\n      // Hold Alt to attract (green ring), release for repulsion (red)\r\n      mouse.current.attract = e.altKey;\r\n    };\r\n\r\n    window.addEventListener('mousemove', onMove);\r\n    window.addEventListener('mouseleave', onLeave);\r\n    window.addEventListener('keydown', onKey);\r\n    window.addEventListener('keyup', onKey);\r\n\r\n    return () => {\r\n      stop();\r\n      io.disconnect();\r\n      window.removeEventListener('resize', onResize);\r\n      window.removeEventListener('mousemove', onMove);\r\n      window.removeEventListener('mouseleave', onLeave);\r\n      window.removeEventListener('keydown', onKey);\r\n      window.removeEventListener('keyup', onKey);\r\n    };\r\n  }, [reduceMotion]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"absolute inset-0 w-full h-full pointer-events-none select-none\"\r\n      aria-hidden\r\n    />\r\n  );\r\n};\r\n\r\nexport default CircuitField;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}