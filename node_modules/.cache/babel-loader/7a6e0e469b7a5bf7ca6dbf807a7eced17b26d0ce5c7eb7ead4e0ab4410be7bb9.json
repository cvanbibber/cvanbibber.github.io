{"ast":null,"code":"export const engineeringTools=[{id:\"trace-width-calculator\",name:\"PCB Trace Width Calculator\",description:\"Calculate the required trace width for a given current and temperature rise\",category:\"general\",inputs:[{id:\"current\",label:\"Current\",unit:\"A\",type:\"number\",min:0.1,max:100,default:1},{id:\"tempRise\",label:\"Temperature Rise\",unit:\"°C\",type:\"number\",min:1,max:100,default:10},{id:\"copperThickness\",label:\"Copper Thickness\",unit:\"oz\",type:\"number\",min:0.5,max:4,default:1},{id:\"traceLength\",label:\"Trace Length\",unit:\"mm\",type:\"number\",min:1,max:1000,default:50}],calculate:inputs=>{const{current,tempRise,copperThickness,traceLength}=inputs;// IPC-2221 formula for external traces\nconst area=Math.pow(current/(0.048*Math.pow(tempRise,0.44)),1/0.725);// Convert area to width (thickness = copper thickness * 0.0347mm/oz)\nconst thickness=copperThickness*0.0347;// mm\nconst width=area/thickness;// Calculate resistance and voltage drop\nconst resistivity=1.7e-8;// ohm⋅m for copper\nconst resistance=resistivity*traceLength*1e-3/(area*1e-6);// ohms\nconst voltageDrop=current*resistance;const powerLoss=current*current*resistance;return{traceWidth:Number(width.toFixed(3)),traceArea:Number(area.toFixed(3)),resistance:Number((resistance*1000).toFixed(3)),// mΩ\nvoltageDrop:Number((voltageDrop*1000).toFixed(3)),// mV\npowerLoss:Number((powerLoss*1000).toFixed(3))// mW\n};}},{id:\"impedance-calculator\",name:\"Microstrip Impedance Calculator\",description:\"Calculate characteristic impedance of microstrip transmission lines\",category:\"impedance\",inputs:[{id:\"width\",label:\"Trace Width\",unit:\"mm\",type:\"number\",min:0.1,max:10,default:0.2},{id:\"thickness\",label:\"Substrate Thickness\",unit:\"mm\",type:\"number\",min:0.1,max:5,default:1.6},{id:\"dielectric\",label:\"Dielectric Constant (εr)\",unit:\"\",type:\"number\",min:1,max:20,default:4.4},{id:\"copperThickness\",label:\"Copper Thickness\",unit:\"μm\",type:\"number\",min:17,max:105,default:35}],calculate:inputs=>{const{width,thickness,dielectric,copperThickness}=inputs;const w=width;const h=thickness;const er=dielectric;const t=copperThickness/1000;// convert to mm\n// Effective width accounting for copper thickness\nconst weff=w+t/Math.PI*Math.log(2*h/t);let z0;if(weff/h<=1){// Narrow trace\nz0=60/Math.sqrt(er)*Math.log(8*h/weff+weff/(4*h));}else{// Wide trace\nz0=120*Math.PI/(Math.sqrt(er)*(weff/h+1.393+0.667*Math.log(weff/h+1.444)));}// Effective dielectric constant\nconst erEff=(er+1)/2+(er-1)/2*Math.pow(1+12*h/weff,-0.5);// Phase velocity\nconst c=299792458;// m/s\nconst vp=c/Math.sqrt(erEff);return{impedance:Number(z0.toFixed(2)),effectiveDielectric:Number(erEff.toFixed(3)),phaseVelocity:Number((vp/1e6).toFixed(1)),// Mm/s\nwavelength:Number((vp/1e9).toFixed(3))// m at 1 GHz\n};}},{id:\"via-calculator\",name:\"Via Impedance Calculator\",description:\"Calculate the impedance and current carrying capacity of vias\",category:\"impedance\",inputs:[{id:\"diameter\",label:\"Via Diameter\",unit:\"mm\",type:\"number\",min:0.1,max:2,default:0.2},{id:\"height\",label:\"Via Height\",unit:\"mm\",type:\"number\",min:0.1,max:5,default:1.6},{id:\"padDiameter\",label:\"Pad Diameter\",unit:\"mm\",type:\"number\",min:0.2,max:3,default:0.4},{id:\"current\",label:\"Current\",unit:\"A\",type:\"number\",min:0.1,max:10,default:1}],calculate:inputs=>{const diameter=inputs.diameter;const height=inputs.height;const current=inputs.current;const d=diameter;const h=height;// Via impedance approximation\nconst impedance=60*Math.log(4*h/d);// Current capacity (conservative estimate)\nconst area=Math.PI*Math.pow(d/2,2);// mm²\nconst currentCapacity=area*2;// A/mm² rule of thumb\n// Thermal resistance\nconst thermalResistance=h/(237*area);// K/W (copper thermal conductivity ≈ 237 W/m⋅K)\n// Temperature rise\nconst resistance=1.7e-8*h/(area*1e-6);// ohms\nconst powerLoss=current*current*resistance;const tempRise=powerLoss*thermalResistance;return{impedance:Number(impedance.toFixed(2)),currentCapacity:Number(currentCapacity.toFixed(2)),resistance:Number((resistance*1e6).toFixed(2)),// μΩ\ntemperatureRise:Number(tempRise.toFixed(1)),safetyMargin:Number(((currentCapacity/current-1)*100).toFixed(1))};}},{id:\"antenna-calculator\",name:\"Dipole Antenna Calculator\",description:\"Calculate dimensions for half-wave dipole antennas\",category:\"antenna\",inputs:[{id:\"frequency\",label:\"Frequency\",unit:\"MHz\",type:\"number\",min:1,max:10000,default:2400},{id:\"wireRadius\",label:\"Wire Radius\",unit:\"mm\",type:\"number\",min:0.1,max:10,default:1},{id:\"velocityFactor\",label:\"Velocity Factor\",unit:\"\",type:\"number\",min:0.6,max:1,default:0.95}],calculate:inputs=>{const{frequency,wireRadius,velocityFactor}=inputs;const c=299792458;// m/s\nconst f=frequency*1e6;// Hz\nconst lambda=c/f*velocityFactor;// m\n// Half-wave dipole length\nconst totalLength=lambda/2;// m\nconst armLength=totalLength/2;// m\n// Quarter-wave monopole (for comparison)\nconst monopoleLength=lambda/4;// m\n// Radiation resistance (approximate)\nconst radiationResistance=73;// ohms for half-wave dipole\n// Bandwidth (approximate, depends on wire thickness)\nconst lengthToDiameter=totalLength*1000/(2*wireRadius);const bandwidth=frequency*0.05/Math.log(lengthToDiameter);// MHz, rough approximation\nreturn{totalLength:Number((totalLength*1000).toFixed(1)),// mm\narmLength:Number((armLength*1000).toFixed(1)),// mm\nmonopoleLength:Number((monopoleLength*1000).toFixed(1)),// mm\nwavelength:Number((lambda*1000).toFixed(1)),// mm\nradiationResistance:radiationResistance,bandwidth:Number(bandwidth.toFixed(1))// MHz\n};}},{id:\"lc-calculator\",name:\"LC Resonant Circuit Calculator\",description:\"Calculate resonant frequency and component values for LC circuits\",category:\"general\",inputs:[{id:\"inductance\",label:\"Inductance\",unit:\"μH\",type:\"number\",min:0.001,max:1000,default:10},{id:\"capacitance\",label:\"Capacitance\",unit:\"pF\",type:\"number\",min:0.1,max:100000,default:100},{id:\"resistance\",label:\"Series Resistance\",unit:\"Ω\",type:\"number\",min:0.1,max:1000,default:10},{id:\"targetFreq\",label:\"Target Frequency\",unit:\"MHz\",type:\"number\",min:0.1,max:10000,default:100}],calculate:inputs=>{const{inductance,capacitance,resistance,targetFreq}=inputs;const L=inductance*1e-6;// H\nconst C=capacitance*1e-12;// F\nconst R=resistance;// Ω\nconst fTarget=targetFreq*1e6;// Hz\n// Resonant frequency\nconst f0=1/(2*Math.PI*Math.sqrt(L*C));// Hz\n// Q factor\nconst omega0=2*Math.PI*f0;const Q=omega0*L/R;// Bandwidth\nconst bandwidth=f0/Q;// Hz\n// Required L for target frequency (keeping C constant)\nconst LForTarget=1/(Math.pow(2*Math.PI*fTarget,2)*C);// H\n// Required C for target frequency (keeping L constant)\nconst CForTarget=1/(Math.pow(2*Math.PI*fTarget,2)*L);// F\n// Characteristic impedance\nconst Z0=Math.sqrt(L/C);// Ω\nreturn{resonantFreq:Number((f0/1e6).toFixed(3)),// MHz\nqFactor:Number(Q.toFixed(1)),bandwidth:Number((bandwidth/1e3).toFixed(1)),// kHz\nrequiredL:Number((LForTarget*1e6).toFixed(3)),// μH\nrequiredC:Number((CForTarget*1e12).toFixed(1)),// pF\nimpedance:Number(Z0.toFixed(1))// Ω\n};}}];","map":{"version":3,"names":["engineeringTools","id","name","description","category","inputs","label","unit","type","min","max","default","calculate","current","tempRise","copperThickness","traceLength","area","Math","pow","thickness","width","resistivity","resistance","voltageDrop","powerLoss","traceWidth","Number","toFixed","traceArea","dielectric","w","h","er","t","weff","PI","log","z0","sqrt","erEff","c","vp","impedance","effectiveDielectric","phaseVelocity","wavelength","diameter","height","d","currentCapacity","thermalResistance","temperatureRise","safetyMargin","frequency","wireRadius","velocityFactor","f","lambda","totalLength","armLength","monopoleLength","radiationResistance","lengthToDiameter","bandwidth","inductance","capacitance","targetFreq","L","C","R","fTarget","f0","omega0","Q","LForTarget","CForTarget","Z0","resonantFreq","qFactor","requiredL","requiredC"],"sources":["C:/Github/cvanbibber.github.io/src/data/tools.ts"],"sourcesContent":["import { Tool } from '../types';\r\n\r\nexport const engineeringTools: Tool[] = [\r\n  {\r\n    id: \"trace-width-calculator\",\r\n    name: \"PCB Trace Width Calculator\",\r\n    description: \"Calculate the required trace width for a given current and temperature rise\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 100, default: 1 },\r\n      { id: \"tempRise\", label: \"Temperature Rise\", unit: \"°C\", type: \"number\", min: 1, max: 100, default: 10 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"oz\", type: \"number\", min: 0.5, max: 4, default: 1 },\r\n      { id: \"traceLength\", label: \"Trace Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 50 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { current, tempRise, copperThickness, traceLength } = inputs;\r\n      \r\n      // IPC-2221 formula for external traces\r\n      const area = Math.pow(current / (0.048 * Math.pow(tempRise, 0.44)), 1/0.725);\r\n      \r\n      // Convert area to width (thickness = copper thickness * 0.0347mm/oz)\r\n      const thickness = copperThickness * 0.0347; // mm\r\n      const width = area / thickness;\r\n      \r\n      // Calculate resistance and voltage drop\r\n      const resistivity = 1.7e-8; // ohm⋅m for copper\r\n      const resistance = (resistivity * traceLength * 1e-3) / (area * 1e-6); // ohms\r\n      const voltageDrop = current * resistance;\r\n      const powerLoss = current * current * resistance;\r\n      \r\n      return {\r\n        traceWidth: Number(width.toFixed(3)),\r\n        traceArea: Number(area.toFixed(3)),\r\n        resistance: Number((resistance * 1000).toFixed(3)), // mΩ\r\n        voltageDrop: Number((voltageDrop * 1000).toFixed(3)), // mV\r\n        powerLoss: Number((powerLoss * 1000).toFixed(3)) // mW\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"impedance-calculator\",\r\n    name: \"Microstrip Impedance Calculator\",\r\n    description: \"Calculate characteristic impedance of microstrip transmission lines\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"width\", label: \"Trace Width\", unit: \"mm\", type: \"number\", min: 0.1, max: 10, default: 0.2 },\r\n      { id: \"thickness\", label: \"Substrate Thickness\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"dielectric\", label: \"Dielectric Constant (εr)\", unit: \"\", type: \"number\", min: 1, max: 20, default: 4.4 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"μm\", type: \"number\", min: 17, max: 105, default: 35 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { width, thickness, dielectric, copperThickness } = inputs;\r\n      \r\n      const w = width;\r\n      const h = thickness;\r\n      const er = dielectric;\r\n      const t = copperThickness / 1000; // convert to mm\r\n      \r\n      // Effective width accounting for copper thickness\r\n      const weff = w + (t / Math.PI) * Math.log(2 * h / t);\r\n      \r\n      let z0;\r\n      if (weff / h <= 1) {\r\n        // Narrow trace\r\n        z0 = (60 / Math.sqrt(er)) * Math.log(8 * h / weff + weff / (4 * h));\r\n      } else {\r\n        // Wide trace\r\n        z0 = (120 * Math.PI) / (Math.sqrt(er) * (weff / h + 1.393 + 0.667 * Math.log(weff / h + 1.444)));\r\n      }\r\n      \r\n      // Effective dielectric constant\r\n      const erEff = (er + 1) / 2 + ((er - 1) / 2) * Math.pow(1 + 12 * h / weff, -0.5);\r\n      \r\n      // Phase velocity\r\n      const c = 299792458; // m/s\r\n      const vp = c / Math.sqrt(erEff);\r\n      \r\n      return {\r\n        impedance: Number(z0.toFixed(2)),\r\n        effectiveDielectric: Number(erEff.toFixed(3)),\r\n        phaseVelocity: Number((vp / 1e6).toFixed(1)), // Mm/s\r\n        wavelength: Number((vp / 1e9).toFixed(3)) // m at 1 GHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"via-calculator\",\r\n    name: \"Via Impedance Calculator\",\r\n    description: \"Calculate the impedance and current carrying capacity of vias\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"diameter\", label: \"Via Diameter\", unit: \"mm\", type: \"number\", min: 0.1, max: 2, default: 0.2 },\r\n      { id: \"height\", label: \"Via Height\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"padDiameter\", label: \"Pad Diameter\", unit: \"mm\", type: \"number\", min: 0.2, max: 3, default: 0.4 },\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 10, default: 1 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const diameter = inputs.diameter;\r\n      const height = inputs.height;\r\n      const current = inputs.current;\r\n      \r\n      const d = diameter;\r\n      const h = height;\r\n      \r\n      // Via impedance approximation\r\n      const impedance = 60 * Math.log(4 * h / d);\r\n      \r\n      // Current capacity (conservative estimate)\r\n      const area = Math.PI * Math.pow(d / 2, 2); // mm²\r\n      const currentCapacity = area * 2; // A/mm² rule of thumb\r\n      \r\n      // Thermal resistance\r\n      const thermalResistance = h / (237 * area); // K/W (copper thermal conductivity ≈ 237 W/m⋅K)\r\n      \r\n      // Temperature rise\r\n      const resistance = 1.7e-8 * h / (area * 1e-6); // ohms\r\n      const powerLoss = current * current * resistance;\r\n      const tempRise = powerLoss * thermalResistance;\r\n      \r\n      return {\r\n        impedance: Number(impedance.toFixed(2)),\r\n        currentCapacity: Number(currentCapacity.toFixed(2)),\r\n        resistance: Number((resistance * 1e6).toFixed(2)), // μΩ\r\n        temperatureRise: Number(tempRise.toFixed(1)),\r\n        safetyMargin: Number(((currentCapacity / current - 1) * 100).toFixed(1))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"antenna-calculator\",\r\n    name: \"Dipole Antenna Calculator\",\r\n    description: \"Calculate dimensions for half-wave dipole antennas\",\r\n    category: \"antenna\",\r\n    inputs: [\r\n      { id: \"frequency\", label: \"Frequency\", unit: \"MHz\", type: \"number\", min: 1, max: 10000, default: 2400 },\r\n      { id: \"wireRadius\", label: \"Wire Radius\", unit: \"mm\", type: \"number\", min: 0.1, max: 10, default: 1 },\r\n      { id: \"velocityFactor\", label: \"Velocity Factor\", unit: \"\", type: \"number\", min: 0.6, max: 1, default: 0.95 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { frequency, wireRadius, velocityFactor } = inputs;\r\n      \r\n      const c = 299792458; // m/s\r\n      const f = frequency * 1e6; // Hz\r\n      const lambda = (c / f) * velocityFactor; // m\r\n      \r\n      // Half-wave dipole length\r\n      const totalLength = lambda / 2; // m\r\n      const armLength = totalLength / 2; // m\r\n      \r\n      // Quarter-wave monopole (for comparison)\r\n      const monopoleLength = lambda / 4; // m\r\n      \r\n      // Radiation resistance (approximate)\r\n      const radiationResistance = 73; // ohms for half-wave dipole\r\n      \r\n      // Bandwidth (approximate, depends on wire thickness)\r\n      const lengthToDiameter = (totalLength * 1000) / (2 * wireRadius);\r\n      const bandwidth = frequency * 0.05 / Math.log(lengthToDiameter); // MHz, rough approximation\r\n      \r\n      return {\r\n        totalLength: Number((totalLength * 1000).toFixed(1)), // mm\r\n        armLength: Number((armLength * 1000).toFixed(1)), // mm\r\n        monopoleLength: Number((monopoleLength * 1000).toFixed(1)), // mm\r\n        wavelength: Number((lambda * 1000).toFixed(1)), // mm\r\n        radiationResistance: radiationResistance,\r\n        bandwidth: Number(bandwidth.toFixed(1)) // MHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"lc-calculator\",\r\n    name: \"LC Resonant Circuit Calculator\",\r\n    description: \"Calculate resonant frequency and component values for LC circuits\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"inductance\", label: \"Inductance\", unit: \"μH\", type: \"number\", min: 0.001, max: 1000, default: 10 },\r\n      { id: \"capacitance\", label: \"Capacitance\", unit: \"pF\", type: \"number\", min: 0.1, max: 100000, default: 100 },\r\n      { id: \"resistance\", label: \"Series Resistance\", unit: \"Ω\", type: \"number\", min: 0.1, max: 1000, default: 10 },\r\n      { id: \"targetFreq\", label: \"Target Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 10000, default: 100 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { inductance, capacitance, resistance, targetFreq } = inputs;\r\n      \r\n      const L = inductance * 1e-6; // H\r\n      const C = capacitance * 1e-12; // F\r\n      const R = resistance; // Ω\r\n      const fTarget = targetFreq * 1e6; // Hz\r\n      \r\n      // Resonant frequency\r\n      const f0 = 1 / (2 * Math.PI * Math.sqrt(L * C)); // Hz\r\n      \r\n      // Q factor\r\n      const omega0 = 2 * Math.PI * f0;\r\n      const Q = omega0 * L / R;\r\n      \r\n      // Bandwidth\r\n      const bandwidth = f0 / Q; // Hz\r\n      \r\n      // Required L for target frequency (keeping C constant)\r\n      const LForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * C); // H\r\n      \r\n      // Required C for target frequency (keeping L constant)\r\n      const CForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * L); // F\r\n      \r\n      // Characteristic impedance\r\n      const Z0 = Math.sqrt(L / C); // Ω\r\n      \r\n      return {\r\n        resonantFreq: Number((f0 / 1e6).toFixed(3)), // MHz\r\n        qFactor: Number(Q.toFixed(1)),\r\n        bandwidth: Number((bandwidth / 1e3).toFixed(1)), // kHz\r\n        requiredL: Number((LForTarget * 1e6).toFixed(3)), // μH\r\n        requiredC: Number((CForTarget * 1e12).toFixed(1)), // pF\r\n        impedance: Number(Z0.toFixed(1)) // Ω\r\n      };\r\n    }\r\n  }\r\n];\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}