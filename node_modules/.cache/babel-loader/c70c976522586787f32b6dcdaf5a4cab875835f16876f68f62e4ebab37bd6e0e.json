{"ast":null,"code":"export const engineeringTools = [{\n  id: \"trace-width-calculator\",\n  name: \"PCB Trace Width Calculator\",\n  description: \"Calculate the required trace width for a given current and temperature rise\",\n  category: \"general\",\n  inputs: [{\n    id: \"current\",\n    label: \"Current\",\n    unit: \"A\",\n    type: \"number\",\n    min: 0.1,\n    max: 100,\n    default: 1\n  }, {\n    id: \"tempRise\",\n    label: \"Temperature Rise\",\n    unit: \"°C\",\n    type: \"number\",\n    min: 1,\n    max: 100,\n    default: 10\n  }, {\n    id: \"copperThickness\",\n    label: \"Copper Thickness\",\n    unit: \"oz\",\n    type: \"number\",\n    min: 0.5,\n    max: 4,\n    default: 1\n  }, {\n    id: \"traceLength\",\n    label: \"Trace Length\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 1,\n    max: 1000,\n    default: 50\n  }],\n  calculate: inputs => {\n    const {\n      current,\n      tempRise,\n      copperThickness,\n      traceLength\n    } = inputs;\n\n    // IPC-2221 formula for external traces\n    const area = Math.pow(current / (0.048 * Math.pow(tempRise, 0.44)), 1 / 0.725);\n\n    // Convert area to width (thickness = copper thickness * 0.0347mm/oz)\n    const thickness = copperThickness * 0.0347; // mm\n    const width = area / thickness;\n\n    // Calculate resistance and voltage drop\n    const resistivity = 1.7e-8; // ohm⋅m for copper\n    const resistance = resistivity * traceLength * 1e-3 / (area * 1e-6); // ohms\n    const voltageDrop = current * resistance;\n    const powerLoss = current * current * resistance;\n    return {\n      traceWidth: Number(width.toFixed(3)),\n      traceArea: Number(area.toFixed(3)),\n      resistance: Number((resistance * 1000).toFixed(3)),\n      // mΩ\n      voltageDrop: Number((voltageDrop * 1000).toFixed(3)),\n      // mV\n      powerLoss: Number((powerLoss * 1000).toFixed(3)) // mW\n    };\n  }\n}, {\n  id: \"impedance-calculator\",\n  name: \"Microstrip Impedance Calculator\",\n  description: \"Calculate characteristic impedance of microstrip transmission lines\",\n  category: \"impedance\",\n  inputs: [{\n    id: \"width\",\n    label: \"Trace Width\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 10,\n    default: 0.2\n  }, {\n    id: \"thickness\",\n    label: \"Substrate Thickness\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 5,\n    default: 1.6\n  }, {\n    id: \"dielectric\",\n    label: \"Dielectric Constant (εr)\",\n    unit: \"\",\n    type: \"number\",\n    min: 1,\n    max: 20,\n    default: 4.4\n  }, {\n    id: \"copperThickness\",\n    label: \"Copper Thickness\",\n    unit: \"μm\",\n    type: \"number\",\n    min: 17,\n    max: 105,\n    default: 35\n  }],\n  calculate: inputs => {\n    const {\n      width,\n      thickness,\n      dielectric,\n      copperThickness\n    } = inputs;\n    const w = width;\n    const h = thickness;\n    const er = dielectric;\n    const t = copperThickness / 1000; // convert to mm\n\n    // Effective width accounting for copper thickness\n    const weff = w + t / Math.PI * Math.log(2 * h / t);\n    let z0;\n    if (weff / h <= 1) {\n      // Narrow trace\n      z0 = 60 / Math.sqrt(er) * Math.log(8 * h / weff + weff / (4 * h));\n    } else {\n      // Wide trace\n      z0 = 120 * Math.PI / (Math.sqrt(er) * (weff / h + 1.393 + 0.667 * Math.log(weff / h + 1.444)));\n    }\n\n    // Effective dielectric constant\n    const erEff = (er + 1) / 2 + (er - 1) / 2 * Math.pow(1 + 12 * h / weff, -0.5);\n\n    // Phase velocity\n    const c = 299792458; // m/s\n    const vp = c / Math.sqrt(erEff);\n    return {\n      impedance: Number(z0.toFixed(2)),\n      effectiveDielectric: Number(erEff.toFixed(3)),\n      phaseVelocity: Number((vp / 1e6).toFixed(1)),\n      // Mm/s\n      wavelength: Number((vp / 1e9).toFixed(3)) // m at 1 GHz\n    };\n  }\n}, {\n  id: \"via-calculator\",\n  name: \"Via Impedance Calculator\",\n  description: \"Calculate the impedance and current carrying capacity of vias\",\n  category: \"impedance\",\n  inputs: [{\n    id: \"diameter\",\n    label: \"Via Diameter\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 2,\n    default: 0.2\n  }, {\n    id: \"height\",\n    label: \"Via Height\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 5,\n    default: 1.6\n  }, {\n    id: \"padDiameter\",\n    label: \"Pad Diameter\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.2,\n    max: 3,\n    default: 0.4\n  }, {\n    id: \"current\",\n    label: \"Current\",\n    unit: \"A\",\n    type: \"number\",\n    min: 0.1,\n    max: 10,\n    default: 1\n  }],\n  calculate: inputs => {\n    const {\n      diameter,\n      height,\n      padDiameter,\n      current\n    } = inputs;\n    const d = diameter;\n    const h = height;\n    const D = padDiameter;\n\n    // Via impedance approximation\n    const impedance = 60 * Math.log(4 * h / d);\n\n    // Current capacity (conservative estimate)\n    const area = Math.PI * Math.pow(d / 2, 2); // mm²\n    const currentCapacity = area * 2; // A/mm² rule of thumb\n\n    // Thermal resistance\n    const thermalResistance = h / (237 * area); // K/W (copper thermal conductivity ≈ 237 W/m⋅K)\n\n    // Temperature rise\n    const resistance = 1.7e-8 * h / (area * 1e-6); // ohms\n    const powerLoss = current * current * resistance;\n    const tempRise = powerLoss * thermalResistance;\n    return {\n      impedance: Number(impedance.toFixed(2)),\n      currentCapacity: Number(currentCapacity.toFixed(2)),\n      resistance: Number((resistance * 1e6).toFixed(2)),\n      // μΩ\n      temperatureRise: Number(tempRise.toFixed(1)),\n      safetyMargin: Number(((currentCapacity / current - 1) * 100).toFixed(1))\n    };\n  }\n}, {\n  id: \"antenna-calculator\",\n  name: \"Dipole Antenna Calculator\",\n  description: \"Calculate dimensions for half-wave dipole antennas\",\n  category: \"antenna\",\n  inputs: [{\n    id: \"frequency\",\n    label: \"Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 1,\n    max: 10000,\n    default: 2400\n  }, {\n    id: \"wireRadius\",\n    label: \"Wire Radius\",\n    unit: \"mm\",\n    type: \"number\",\n    min: 0.1,\n    max: 10,\n    default: 1\n  }, {\n    id: \"velocityFactor\",\n    label: \"Velocity Factor\",\n    unit: \"\",\n    type: \"number\",\n    min: 0.6,\n    max: 1,\n    default: 0.95\n  }],\n  calculate: inputs => {\n    const {\n      frequency,\n      wireRadius,\n      velocityFactor\n    } = inputs;\n    const c = 299792458; // m/s\n    const f = frequency * 1e6; // Hz\n    const lambda = c / f * velocityFactor; // m\n\n    // Half-wave dipole length\n    const totalLength = lambda / 2; // m\n    const armLength = totalLength / 2; // m\n\n    // Quarter-wave monopole (for comparison)\n    const monopoleLength = lambda / 4; // m\n\n    // Radiation resistance (approximate)\n    const radiationResistance = 73; // ohms for half-wave dipole\n\n    // Bandwidth (approximate, depends on wire thickness)\n    const lengthToDiameter = totalLength * 1000 / (2 * wireRadius);\n    const bandwidth = frequency * 0.05 / Math.log(lengthToDiameter); // MHz, rough approximation\n\n    return {\n      totalLength: Number((totalLength * 1000).toFixed(1)),\n      // mm\n      armLength: Number((armLength * 1000).toFixed(1)),\n      // mm\n      monopoleLength: Number((monopoleLength * 1000).toFixed(1)),\n      // mm\n      wavelength: Number((lambda * 1000).toFixed(1)),\n      // mm\n      radiationResistance: radiationResistance,\n      bandwidth: Number(bandwidth.toFixed(1)) // MHz\n    };\n  }\n}, {\n  id: \"lc-calculator\",\n  name: \"LC Resonant Circuit Calculator\",\n  description: \"Calculate resonant frequency and component values for LC circuits\",\n  category: \"general\",\n  inputs: [{\n    id: \"inductance\",\n    label: \"Inductance\",\n    unit: \"μH\",\n    type: \"number\",\n    min: 0.001,\n    max: 1000,\n    default: 10\n  }, {\n    id: \"capacitance\",\n    label: \"Capacitance\",\n    unit: \"pF\",\n    type: \"number\",\n    min: 0.1,\n    max: 100000,\n    default: 100\n  }, {\n    id: \"resistance\",\n    label: \"Series Resistance\",\n    unit: \"Ω\",\n    type: \"number\",\n    min: 0.1,\n    max: 1000,\n    default: 10\n  }, {\n    id: \"targetFreq\",\n    label: \"Target Frequency\",\n    unit: \"MHz\",\n    type: \"number\",\n    min: 0.1,\n    max: 10000,\n    default: 100\n  }],\n  calculate: inputs => {\n    const {\n      inductance,\n      capacitance,\n      resistance,\n      targetFreq\n    } = inputs;\n    const L = inductance * 1e-6; // H\n    const C = capacitance * 1e-12; // F\n    const R = resistance; // Ω\n    const fTarget = targetFreq * 1e6; // Hz\n\n    // Resonant frequency\n    const f0 = 1 / (2 * Math.PI * Math.sqrt(L * C)); // Hz\n\n    // Q factor\n    const omega0 = 2 * Math.PI * f0;\n    const Q = omega0 * L / R;\n\n    // Bandwidth\n    const bandwidth = f0 / Q; // Hz\n\n    // Required L for target frequency (keeping C constant)\n    const LForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * C); // H\n\n    // Required C for target frequency (keeping L constant)\n    const CForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * L); // F\n\n    // Characteristic impedance\n    const Z0 = Math.sqrt(L / C); // Ω\n\n    return {\n      resonantFreq: Number((f0 / 1e6).toFixed(3)),\n      // MHz\n      qFactor: Number(Q.toFixed(1)),\n      bandwidth: Number((bandwidth / 1e3).toFixed(1)),\n      // kHz\n      requiredL: Number((LForTarget * 1e6).toFixed(3)),\n      // μH\n      requiredC: Number((CForTarget * 1e12).toFixed(1)),\n      // pF\n      impedance: Number(Z0.toFixed(1)) // Ω\n    };\n  }\n}];","map":{"version":3,"names":["engineeringTools","id","name","description","category","inputs","label","unit","type","min","max","default","calculate","current","tempRise","copperThickness","traceLength","area","Math","pow","thickness","width","resistivity","resistance","voltageDrop","powerLoss","traceWidth","Number","toFixed","traceArea","dielectric","w","h","er","t","weff","PI","log","z0","sqrt","erEff","c","vp","impedance","effectiveDielectric","phaseVelocity","wavelength","diameter","height","padDiameter","d","D","currentCapacity","thermalResistance","temperatureRise","safetyMargin","frequency","wireRadius","velocityFactor","f","lambda","totalLength","armLength","monopoleLength","radiationResistance","lengthToDiameter","bandwidth","inductance","capacitance","targetFreq","L","C","R","fTarget","f0","omega0","Q","LForTarget","CForTarget","Z0","resonantFreq","qFactor","requiredL","requiredC"],"sources":["C:/Github/cvanbibber.github.io/src/data/tools.ts"],"sourcesContent":["import { Tool } from '../types';\r\n\r\nexport const engineeringTools: Tool[] = [\r\n  {\r\n    id: \"trace-width-calculator\",\r\n    name: \"PCB Trace Width Calculator\",\r\n    description: \"Calculate the required trace width for a given current and temperature rise\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 100, default: 1 },\r\n      { id: \"tempRise\", label: \"Temperature Rise\", unit: \"°C\", type: \"number\", min: 1, max: 100, default: 10 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"oz\", type: \"number\", min: 0.5, max: 4, default: 1 },\r\n      { id: \"traceLength\", label: \"Trace Length\", unit: \"mm\", type: \"number\", min: 1, max: 1000, default: 50 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { current, tempRise, copperThickness, traceLength } = inputs;\r\n      \r\n      // IPC-2221 formula for external traces\r\n      const area = Math.pow(current / (0.048 * Math.pow(tempRise, 0.44)), 1/0.725);\r\n      \r\n      // Convert area to width (thickness = copper thickness * 0.0347mm/oz)\r\n      const thickness = copperThickness * 0.0347; // mm\r\n      const width = area / thickness;\r\n      \r\n      // Calculate resistance and voltage drop\r\n      const resistivity = 1.7e-8; // ohm⋅m for copper\r\n      const resistance = (resistivity * traceLength * 1e-3) / (area * 1e-6); // ohms\r\n      const voltageDrop = current * resistance;\r\n      const powerLoss = current * current * resistance;\r\n      \r\n      return {\r\n        traceWidth: Number(width.toFixed(3)),\r\n        traceArea: Number(area.toFixed(3)),\r\n        resistance: Number((resistance * 1000).toFixed(3)), // mΩ\r\n        voltageDrop: Number((voltageDrop * 1000).toFixed(3)), // mV\r\n        powerLoss: Number((powerLoss * 1000).toFixed(3)) // mW\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"impedance-calculator\",\r\n    name: \"Microstrip Impedance Calculator\",\r\n    description: \"Calculate characteristic impedance of microstrip transmission lines\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"width\", label: \"Trace Width\", unit: \"mm\", type: \"number\", min: 0.1, max: 10, default: 0.2 },\r\n      { id: \"thickness\", label: \"Substrate Thickness\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"dielectric\", label: \"Dielectric Constant (εr)\", unit: \"\", type: \"number\", min: 1, max: 20, default: 4.4 },\r\n      { id: \"copperThickness\", label: \"Copper Thickness\", unit: \"μm\", type: \"number\", min: 17, max: 105, default: 35 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { width, thickness, dielectric, copperThickness } = inputs;\r\n      \r\n      const w = width;\r\n      const h = thickness;\r\n      const er = dielectric;\r\n      const t = copperThickness / 1000; // convert to mm\r\n      \r\n      // Effective width accounting for copper thickness\r\n      const weff = w + (t / Math.PI) * Math.log(2 * h / t);\r\n      \r\n      let z0;\r\n      if (weff / h <= 1) {\r\n        // Narrow trace\r\n        z0 = (60 / Math.sqrt(er)) * Math.log(8 * h / weff + weff / (4 * h));\r\n      } else {\r\n        // Wide trace\r\n        z0 = (120 * Math.PI) / (Math.sqrt(er) * (weff / h + 1.393 + 0.667 * Math.log(weff / h + 1.444)));\r\n      }\r\n      \r\n      // Effective dielectric constant\r\n      const erEff = (er + 1) / 2 + ((er - 1) / 2) * Math.pow(1 + 12 * h / weff, -0.5);\r\n      \r\n      // Phase velocity\r\n      const c = 299792458; // m/s\r\n      const vp = c / Math.sqrt(erEff);\r\n      \r\n      return {\r\n        impedance: Number(z0.toFixed(2)),\r\n        effectiveDielectric: Number(erEff.toFixed(3)),\r\n        phaseVelocity: Number((vp / 1e6).toFixed(1)), // Mm/s\r\n        wavelength: Number((vp / 1e9).toFixed(3)) // m at 1 GHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"via-calculator\",\r\n    name: \"Via Impedance Calculator\",\r\n    description: \"Calculate the impedance and current carrying capacity of vias\",\r\n    category: \"impedance\",\r\n    inputs: [\r\n      { id: \"diameter\", label: \"Via Diameter\", unit: \"mm\", type: \"number\", min: 0.1, max: 2, default: 0.2 },\r\n      { id: \"height\", label: \"Via Height\", unit: \"mm\", type: \"number\", min: 0.1, max: 5, default: 1.6 },\r\n      { id: \"padDiameter\", label: \"Pad Diameter\", unit: \"mm\", type: \"number\", min: 0.2, max: 3, default: 0.4 },\r\n      { id: \"current\", label: \"Current\", unit: \"A\", type: \"number\", min: 0.1, max: 10, default: 1 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { diameter, height, padDiameter, current } = inputs;\r\n      \r\n      const d = diameter;\r\n      const h = height;\r\n      const D = padDiameter;\r\n      \r\n      // Via impedance approximation\r\n      const impedance = 60 * Math.log(4 * h / d);\r\n      \r\n      // Current capacity (conservative estimate)\r\n      const area = Math.PI * Math.pow(d / 2, 2); // mm²\r\n      const currentCapacity = area * 2; // A/mm² rule of thumb\r\n      \r\n      // Thermal resistance\r\n      const thermalResistance = h / (237 * area); // K/W (copper thermal conductivity ≈ 237 W/m⋅K)\r\n      \r\n      // Temperature rise\r\n      const resistance = 1.7e-8 * h / (area * 1e-6); // ohms\r\n      const powerLoss = current * current * resistance;\r\n      const tempRise = powerLoss * thermalResistance;\r\n      \r\n      return {\r\n        impedance: Number(impedance.toFixed(2)),\r\n        currentCapacity: Number(currentCapacity.toFixed(2)),\r\n        resistance: Number((resistance * 1e6).toFixed(2)), // μΩ\r\n        temperatureRise: Number(tempRise.toFixed(1)),\r\n        safetyMargin: Number(((currentCapacity / current - 1) * 100).toFixed(1))\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"antenna-calculator\",\r\n    name: \"Dipole Antenna Calculator\",\r\n    description: \"Calculate dimensions for half-wave dipole antennas\",\r\n    category: \"antenna\",\r\n    inputs: [\r\n      { id: \"frequency\", label: \"Frequency\", unit: \"MHz\", type: \"number\", min: 1, max: 10000, default: 2400 },\r\n      { id: \"wireRadius\", label: \"Wire Radius\", unit: \"mm\", type: \"number\", min: 0.1, max: 10, default: 1 },\r\n      { id: \"velocityFactor\", label: \"Velocity Factor\", unit: \"\", type: \"number\", min: 0.6, max: 1, default: 0.95 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { frequency, wireRadius, velocityFactor } = inputs;\r\n      \r\n      const c = 299792458; // m/s\r\n      const f = frequency * 1e6; // Hz\r\n      const lambda = (c / f) * velocityFactor; // m\r\n      \r\n      // Half-wave dipole length\r\n      const totalLength = lambda / 2; // m\r\n      const armLength = totalLength / 2; // m\r\n      \r\n      // Quarter-wave monopole (for comparison)\r\n      const monopoleLength = lambda / 4; // m\r\n      \r\n      // Radiation resistance (approximate)\r\n      const radiationResistance = 73; // ohms for half-wave dipole\r\n      \r\n      // Bandwidth (approximate, depends on wire thickness)\r\n      const lengthToDiameter = (totalLength * 1000) / (2 * wireRadius);\r\n      const bandwidth = frequency * 0.05 / Math.log(lengthToDiameter); // MHz, rough approximation\r\n      \r\n      return {\r\n        totalLength: Number((totalLength * 1000).toFixed(1)), // mm\r\n        armLength: Number((armLength * 1000).toFixed(1)), // mm\r\n        monopoleLength: Number((monopoleLength * 1000).toFixed(1)), // mm\r\n        wavelength: Number((lambda * 1000).toFixed(1)), // mm\r\n        radiationResistance: radiationResistance,\r\n        bandwidth: Number(bandwidth.toFixed(1)) // MHz\r\n      };\r\n    }\r\n  },\r\n  {\r\n    id: \"lc-calculator\",\r\n    name: \"LC Resonant Circuit Calculator\",\r\n    description: \"Calculate resonant frequency and component values for LC circuits\",\r\n    category: \"general\",\r\n    inputs: [\r\n      { id: \"inductance\", label: \"Inductance\", unit: \"μH\", type: \"number\", min: 0.001, max: 1000, default: 10 },\r\n      { id: \"capacitance\", label: \"Capacitance\", unit: \"pF\", type: \"number\", min: 0.1, max: 100000, default: 100 },\r\n      { id: \"resistance\", label: \"Series Resistance\", unit: \"Ω\", type: \"number\", min: 0.1, max: 1000, default: 10 },\r\n      { id: \"targetFreq\", label: \"Target Frequency\", unit: \"MHz\", type: \"number\", min: 0.1, max: 10000, default: 100 }\r\n    ],\r\n    calculate: (inputs) => {\r\n      const { inductance, capacitance, resistance, targetFreq } = inputs;\r\n      \r\n      const L = inductance * 1e-6; // H\r\n      const C = capacitance * 1e-12; // F\r\n      const R = resistance; // Ω\r\n      const fTarget = targetFreq * 1e6; // Hz\r\n      \r\n      // Resonant frequency\r\n      const f0 = 1 / (2 * Math.PI * Math.sqrt(L * C)); // Hz\r\n      \r\n      // Q factor\r\n      const omega0 = 2 * Math.PI * f0;\r\n      const Q = omega0 * L / R;\r\n      \r\n      // Bandwidth\r\n      const bandwidth = f0 / Q; // Hz\r\n      \r\n      // Required L for target frequency (keeping C constant)\r\n      const LForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * C); // H\r\n      \r\n      // Required C for target frequency (keeping L constant)\r\n      const CForTarget = 1 / (Math.pow(2 * Math.PI * fTarget, 2) * L); // F\r\n      \r\n      // Characteristic impedance\r\n      const Z0 = Math.sqrt(L / C); // Ω\r\n      \r\n      return {\r\n        resonantFreq: Number((f0 / 1e6).toFixed(3)), // MHz\r\n        qFactor: Number(Q.toFixed(1)),\r\n        bandwidth: Number((bandwidth / 1e3).toFixed(1)), // kHz\r\n        requiredL: Number((LForTarget * 1e6).toFixed(3)), // μH\r\n        requiredC: Number((CForTarget * 1e12).toFixed(1)), // pF\r\n        impedance: Number(Z0.toFixed(1)) // Ω\r\n      };\r\n    }\r\n  }\r\n];\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}